basePath: /
definitions:
  types.Action:
    enum:
    - full_control
    - can_ban_user
    - can_unban_user
    - can_add_store
    - can_update_store
    - can_delete_store
    - can_create_order
    - can_delete_order
    - can_update_order_shipment
    - can_complete_order_payment
    - can_cancel_order_payment
    - can_add_role
    - can_update_role
    - can_delete_role
    - can_add_user_with_role
    - can_add_permission_group
    - can_delete_permission_group
    - can_update_permission_group
    - can_assign_permission_group_to_role
    - can_remove_permission_group_from_role
    - can_assign_permission_to_group
    - can_remove_permission_from_group
    - can_add_product_category
    - can_update_product_category
    - can_delete_product_category
    - can_add_product
    - can_update_product
    - can_delete_product
    - can_add_product_tag
    - can_update_product_tag
    - can_delete_product_tag
    - can_add_product_offer
    - can_update_product_offer
    - can_delete_product_offer
    - can_add_product_attribute
    - can_update_product_attribute
    - can_delete_product_attribute
    - can_delete_product_comment
    - can_approve_withdraw_transaction
    - can_cancel_withdraw_transaction
    type: string
    x-enum-varnames:
    - ActionFullControl
    - ActionCanBanUser
    - ActionCanUnbanUser
    - ActionCanAddStore
    - ActionCanUpdateStore
    - ActionCanDeleteStore
    - ActionCanCreateOrder
    - ActionCanDeleteOrder
    - ActionCanUpdateOrderShipment
    - ActionCanCompleteOrderPayment
    - ActionCanCancelOrderPayment
    - ActionCanAddRole
    - ActionCanUpdateRole
    - ActionCanDeleteRole
    - ActionCanAddUserWithRole
    - ActionCanAddPermissionGroup
    - ActionCanDeletePermissionGroup
    - ActionCanUpdatePermissionGroup
    - ActionCanAssignPermissionGroupToRole
    - ActionCanRemovePermissionGroupFromRole
    - ActionCanAssignPermissionToGroup
    - ActionCanRemovePermissionFromGroup
    - ActionCanAddProductCategory
    - ActionCanUpdateProductCategory
    - ActionCanDeleteProductCategory
    - ActionCanAddProduct
    - ActionCanUpdateProduct
    - ActionCanDeleteProduct
    - ActionCanAddProductTag
    - ActionCanUpdateProductTag
    - ActionCanDeleteProductTag
    - ActionCanAddProductOffer
    - ActionCanUpdateProductOffer
    - ActionCanDeleteProductOffer
    - ActionCanAddProductAttribute
    - ActionCanUpdateProductAttribute
    - ActionCanDeleteProductAttribute
    - ActionCanDeleteProductComment
    - ActionCanApproveWithdrawTransaction
    - ActionCanCancelWithdrawTransaction
  types.CreateOrderPayload:
    properties:
      arrivalDate:
        description: Expected arrival date for the order (required)
        type: string
      productVariants:
        description: List of product variants to order (required)
        items:
          $ref: '#/definitions/types.OrderProductVariantAssignmentPayload'
        type: array
      receiverAddressId:
        description: ID of the receiver's address (required)
        type: integer
      userId:
        description: ID of the user placing the order
        type: integer
    required:
    - arrivalDate
    - productVariants
    - receiverAddressId
    type: object
  types.CreatePermissionGroupPayload:
    properties:
      description:
        description: Description of the permission group
        type: string
      name:
        description: Name of the permission group (required, 1+ characters)
        type: string
    required:
    - name
    type: object
  types.CreateProductAttributePayload:
    properties:
      label:
        description: Attribute name/label (required)
        type: string
      options:
        description: List of option values (required)
        items:
          type: string
        type: array
    required:
    - label
    - options
    type: object
  types.CreateProductBasePayload:
    properties:
      description:
        description: Product description
        type: string
      name:
        description: Product name (required)
        type: string
      price:
        description: Product price (required)
        type: number
      shipmentFactor:
        description: Shipping cost factor (required)
        type: number
      slug:
        description: URL-friendly slug
        type: string
      storeId:
        description: Store ID (required)
        type: integer
      subcategoryId:
        description: Subcategory ID (required)
        type: integer
    required:
    - name
    - price
    - shipmentFactor
    - storeId
    - subcategoryId
    type: object
  types.CreateProductCategoryPayload:
    properties:
      imageName:
        description: Image filename (required)
        type: string
      name:
        description: Name of the category (required)
        type: string
      parentCategoryId:
        description: ID of the parent category, if any
        type: integer
    required:
    - imageName
    - name
    type: object
  types.CreateProductCommentPayload:
    properties:
      comment:
        description: Comment text (required)
        type: string
      productId:
        description: Product ID being commented on
        type: integer
      scoring:
        description: Rating score (1-5) (required)
        type: integer
      userId:
        description: User ID making the comment
        type: integer
    required:
    - comment
    - scoring
    type: object
  types.CreateProductImagePayload:
    properties:
      imageName:
        description: Image filename (required)
        type: string
      isMain:
        description: Whether this is the main product image (required)
        type: boolean
    required:
    - imageName
    - isMain
    type: object
  types.CreateProductOfferPayload:
    properties:
      discount:
        description: Discount percentage (required)
        type: number
      expireAt:
        description: Expiration date (required)
        type: string
      productId:
        description: Product ID this offer applies to
        type: integer
    required:
    - discount
    - expireAt
    type: object
  types.CreateProductPayload:
    properties:
      base:
        allOf:
        - $ref: '#/definitions/types.CreateProductBasePayload'
        description: Base product information (required)
      images:
        description: List of product images (required)
        items:
          $ref: '#/definitions/types.CreateProductImagePayload'
        type: array
      specs:
        description: List of product specifications (required)
        items:
          $ref: '#/definitions/types.CreateProductSpecPayload'
        type: array
      tagIds:
        description: List of tag IDs to assign (required)
        items:
          type: integer
        type: array
      variants:
        description: List of product variants (required)
        items:
          $ref: '#/definitions/types.CreateProductVariantPayload'
        type: array
    required:
    - base
    - images
    - specs
    - tagIds
    - variants
    type: object
  types.CreateProductSpecPayload:
    properties:
      label:
        description: Specification label (required)
        type: string
      value:
        description: Specification value (required)
        type: string
    required:
    - label
    - value
    type: object
  types.CreateProductTagPayload:
    properties:
      name:
        description: Name of the tag (required)
        type: string
    required:
    - name
    type: object
  types.CreateProductVariantPayload:
    properties:
      attributeSets:
        description: Set of attributes defining this variant (required)
        items:
          $ref: '#/definitions/types.ProductVariantAttributeSetPayload'
        type: array
      quantity:
        description: Initial stock quantity (required)
        type: integer
    required:
    - attributeSets
    - quantity
    type: object
  types.CreateRolePayload:
    properties:
      description:
        description: Description of the role
        type: string
      name:
        description: Name of the role (required, 1+ characters)
        type: string
    required:
    - name
    type: object
  types.CreateStoreAddressPayload:
    properties:
      city:
        description: City (required)
        type: string
      details:
        description: Additional address details
        type: string
      state:
        description: State/Province (required)
        type: string
      storeId:
        description: ID of the store this address belongs to
        type: integer
      street:
        description: Street address (required)
        type: string
      zipcode:
        description: Zip/Postal code (required)
        type: string
    required:
    - city
    - state
    - street
    - zipcode
    type: object
  types.CreateStorePayload:
    properties:
      description:
        description: Store description
        type: string
      name:
        description: Store name (required)
        type: string
      ownerId:
        description: ID of the store owner
        type: integer
    required:
    - name
    type: object
  types.CreateStorePhoneNumberPayload:
    properties:
      countryCode:
        description: Country code (1-4 characters, required)
        maxLength: 4
        minLength: 1
        type: string
      number:
        description: Phone number (5-20 characters, required)
        maxLength: 20
        minLength: 5
        type: string
      storeId:
        description: ID of the store this number belongs to
        type: integer
    required:
    - countryCode
    - number
    type: object
  types.CreateUserAddressPayload:
    properties:
      city:
        description: City
        type: string
      details:
        description: Additional address details
        type: string
      state:
        description: State/Province
        type: string
      street:
        description: Street address
        type: string
      userId:
        description: User ID this address belongs to
        type: integer
      zipcode:
        description: Zip/Postal code
        type: string
    required:
    - city
    - state
    - street
    - zipcode
    type: object
  types.CreateUserPayload:
    properties:
      birthDate:
        description: Birth date
        type: string
      email:
        description: Email address
        type: string
      fullName:
        description: Full name
        type: string
      password:
        description: Password (6-130 characters)
        maxLength: 130
        minLength: 6
        type: string
      roleId:
        description: Role ID
        type: integer
      username:
        description: Username (5+ characters)
        minLength: 5
        type: string
    required:
    - birthDate
    - email
    - password
    - username
    type: object
  types.CreateUserPhoneNumberPayload:
    properties:
      countryCode:
        description: Country code (1-4 characters)
        maxLength: 4
        minLength: 1
        type: string
      number:
        description: Phone number (5-20 characters)
        maxLength: 20
        minLength: 5
        type: string
      userId:
        description: User ID this phone number belongs to
        type: integer
    required:
    - countryCode
    - number
    type: object
  types.CreateWalletTransactionPayload:
    properties:
      amount:
        description: Transaction amount (required)
        type: number
      txType:
        allOf:
        - $ref: '#/definitions/types.TransactionType'
        description: Type of transaction
      walletId:
        description: ID of the wallet this transaction belongs to
        type: integer
    required:
    - amount
    type: object
  types.FileUploadResponse:
    properties:
      fileName:
        description: Uploaded file name
        type: string
    type: object
  types.ForgotPasswordRequestPayload:
    properties:
      email:
        description: Email address to send reset instructions to (valid email, required)
        type: string
    required:
    - email
    type: object
  types.GroupActionPermissionAssignmentPayload:
    properties:
      actions:
        description: Names of actions to assign (at least one required)
        items:
          type: string
        type: array
      groupId:
        description: ID of the permission group (required)
        type: integer
    type: object
  types.GroupActionPermissionInfo:
    properties:
      action:
        allOf:
        - $ref: '#/definitions/types.Action'
        description: Action being permitted (needs permission)
    type: object
  types.GroupResourcePermissionAssignmentPayload:
    properties:
      groupId:
        description: ID of the permission group (required)
        type: integer
      resources:
        description: Names of resources to assign (at least one required)
        items:
          type: string
        type: array
    type: object
  types.GroupResourcePermissionInfo:
    properties:
      resource:
        allOf:
        - $ref: '#/definitions/types.Resource'
        description: Resource being permitted (needs permission)
    type: object
  types.HTTPError:
    properties:
      message:
        description: Error message string
        type: string
    type: object
  types.LoginResponsePayload:
    properties:
      accessToken:
        description: JWT access token for authenticated requests
        type: string
    type: object
  types.LoginUserPayload:
    properties:
      password:
        description: Password for login (6-130 characters, required)
        maxLength: 130
        minLength: 6
        type: string
      username:
        description: Username for login (5+ characters, required)
        minLength: 5
        type: string
    required:
    - password
    - username
    type: object
  types.LogoutResponsePayload:
    properties:
      success:
        description: Indicates whether the logout was successful
        type: boolean
    type: object
  types.NewAddressResponse:
    properties:
      addressId:
        description: New address id
        type: integer
    type: object
  types.NewOrderResponse:
    properties:
      orderId:
        description: New order id
        type: integer
    type: object
  types.NewPermissionGroupResponse:
    properties:
      pgroupId:
        description: New permission group id
        type: integer
    type: object
  types.NewPhoneNumberResponse:
    properties:
      phoneNumberId:
        description: New phone number id
        type: integer
    type: object
  types.NewProductAttributeResponse:
    properties:
      attributeId:
        description: New product attribute id
        type: integer
    type: object
  types.NewProductCategoryResponse:
    properties:
      categoryId:
        description: New product category id
        type: integer
    type: object
  types.NewProductCommentResponse:
    properties:
      commentId:
        description: New product comment id
        type: integer
    type: object
  types.NewProductOfferResponse:
    properties:
      offerId:
        description: New product offer id
        type: integer
    type: object
  types.NewProductResponse:
    properties:
      productId:
        description: New product id
        type: integer
    type: object
  types.NewProductTagResponse:
    properties:
      tagId:
        description: New product tag id
        type: integer
    type: object
  types.NewRoleResponse:
    properties:
      roleId:
        description: New role id
        type: integer
    type: object
  types.NewStoreResponse:
    properties:
      storeId:
        description: New store id
        type: integer
    type: object
  types.NewUserResponse:
    properties:
      userId:
        description: New user id
        type: integer
    type: object
  types.NewWalletTransactionResponse:
    properties:
      txId:
        description: New transaction id
        type: integer
    type: object
  types.Order:
    properties:
      createdAt:
        description: When the order was created (private, needs permission)
        type: string
      fee:
        description: Any additional fees (private, needs permission)
        type: number
      id:
        description: Unique identifier for the order (private, needs permission)
        type: integer
      paymentStatus:
        allOf:
        - $ref: '#/definitions/types.OrderPaymentStatus'
        description: Current status of the payment (private, needs permission)
      shipmentStatus:
        allOf:
        - $ref: '#/definitions/types.OrderShipmentStatus'
        description: Current status of the shipment (private, needs permission)
      totalProducts:
        description: Total number of products in the order (private, needs permission)
        type: integer
      totalShipmentPrice:
        description: Total shipping cost (private, needs permission)
        type: number
      totalVariantsPrice:
        description: Total price of all product variants (private, needs permission)
        type: number
      updatedAt:
        description: When the order was last updated (private, needs permission)
        type: string
      userId:
        description: ID of the user who placed the order (private, needs permission)
        type: integer
    type: object
  types.OrderPaymentStatus:
    enum:
    - pending
    - successful
    - failed
    type: string
    x-enum-varnames:
    - OrderPaymentStatusPending
    - OrderPaymentStatusSuccessful
    - OrderPaymentStatusFailed
  types.OrderProductVariantAssignmentPayload:
    properties:
      quantity:
        description: Number of units to order (required)
        type: integer
      variantId:
        description: ID of the product variant to order (required)
        type: integer
    required:
    - quantity
    - variantId
    type: object
  types.OrderProductVariantInfo:
    properties:
      id:
        description: Unique identifier for the order variant (private, needs permission)
        type: integer
      orderId:
        description: ID of the order this variant belongs to (private, needs permission)
        type: integer
      product:
        allOf:
        - $ref: '#/definitions/types.Product'
        description: Information about the base product (private, needs permission)
      quantity:
        description: Quantity ordered (private, needs permission)
        type: integer
      selectedVariant:
        allOf:
        - $ref: '#/definitions/types.ProductVariantWithAttributeSet'
        description: Complete information about the selected variant (private, needs
          permission)
      shippingPrice:
        description: Shipping cost for this variant (private, needs permission)
        type: number
      variantId:
        description: ID of the product variant (private, needs permission)
        type: integer
      variantPrice:
        description: Price per unit of the variant (private, needs permission)
        type: number
    type: object
  types.OrderShipmentStatus:
    enum:
    - to_be_determined
    - on_the_way
    - delivered
    - cancelled
    type: string
    x-enum-varnames:
    - OrderShipmentStatusToBeDetermined
    - OrderShipmentStatusOnTheWay
    - OrderShipmentStatusDelivered
    - OrderShipmentStatusCancelled
  types.PermissionGroup:
    properties:
      createdAt:
        description: When the permission group was created (needs permission)
        type: string
      description:
        description: Description of the permission group (needs permission)
        type: string
      id:
        description: Unique identifier for the permission group (needs permission)
        type: integer
      name:
        description: Name of the permission group (needs permission)
        type: string
    type: object
  types.PermissionGroupWithPermissions:
    properties:
      actionPermissions:
        description: List of action permissions in this group (needs permission)
        items:
          $ref: '#/definitions/types.GroupActionPermissionInfo'
        type: array
      createdAt:
        description: When the permission group was created (needs permission)
        type: string
      description:
        description: Description of the permission group (needs permission)
        type: string
      id:
        description: Unique identifier for the permission group (needs permission)
        type: integer
      name:
        description: Name of the permission group (needs permission)
        type: string
      resourcePermissions:
        description: List of resource permissions in this group (needs permission)
        items:
          $ref: '#/definitions/types.GroupResourcePermissionInfo'
        type: array
    type: object
  types.Product:
    properties:
      createdAt:
        description: When the product was created (public)
        type: string
      description:
        description: Detailed product description (public)
        type: string
      id:
        description: Unique product identifier (public)
        type: integer
      isActive:
        description: Whether the product is active/available (public)
        type: boolean
      mainImage:
        allOf:
        - $ref: '#/definitions/types.ProductImage'
        description: Main product image (public, optional)
      name:
        description: Name of the product (public)
        type: string
      offer:
        allOf:
        - $ref: '#/definitions/types.ProductOffer'
        description: Current offer/discount, if any (public, optional)
      price:
        description: Current price of the product (public)
        type: number
      shipmentFactor:
        description: Factor used to calculate shipping costs (public)
        type: number
      slug:
        description: URL-friendly product identifier (public)
        type: string
      store:
        allOf:
        - $ref: '#/definitions/types.StoreInfo'
        description: Store information (public)
      subcategoryId:
        description: ID of the subcategory this product belongs to (public)
        type: integer
      totalQuantity:
        description: Total available quantity across all variants (public)
        type: integer
      updatedAt:
        description: When the product was last updated (public)
        type: string
    type: object
  types.ProductAttributeOption:
    properties:
      attributeId:
        description: ID of the attribute this option belongs to (public)
        type: integer
      id:
        description: Unique option identifier (public)
        type: integer
      value:
        description: Value of the option (public)
        type: string
    type: object
  types.ProductAttributeWithOptions:
    properties:
      id:
        description: Unique attribute identifier (public)
        type: integer
      label:
        description: Name/label of the attribute (public)
        type: string
      options:
        description: List of available options for this attribute (public)
        items:
          $ref: '#/definitions/types.ProductAttributeOption'
        type: array
    type: object
  types.ProductCategory:
    properties:
      createdAt:
        description: When the category was created (public)
        type: string
      id:
        description: Unique category identifier (public)
        type: integer
      imageName:
        description: Filename of the category image (public)
        type: string
      name:
        description: Name of the category (public)
        type: string
      parentCategoryId:
        description: ID of the parent category, if any (public)
        type: number
      updatedAt:
        description: When the category was last updated (public)
        type: string
    type: object
  types.ProductCategoryWithParents:
    properties:
      createdAt:
        description: When the category was created (public)
        type: string
      id:
        description: Unique category identifier (public)
        type: integer
      imageName:
        description: Filename of the category image (public)
        type: string
      name:
        description: Name of the category (public)
        type: string
      parentCategory:
        allOf:
        - $ref: '#/definitions/types.ProductCategoryWithParents'
        description: Parent category information (public, optional)
      parentCategoryId:
        description: ID of the parent category, if any (public)
        type: number
      updatedAt:
        description: When the category was last updated (public)
        type: string
    type: object
  types.ProductComment:
    properties:
      comment:
        description: Text of the comment (public)
        type: string
      createdAt:
        description: When the comment was created (public)
        type: string
      id:
        description: Unique comment identifier (public)
        type: integer
      productId:
        description: ID of the product being commented on (public)
        type: integer
      scoring:
        description: Rating score (1-5) (public)
        type: integer
      updatedAt:
        description: When the comment was last updated (public)
        type: string
      userId:
        description: ID of the user who made the comment (public)
        type: integer
    type: object
  types.ProductExtended:
    properties:
      createdAt:
        description: When the product was created (public)
        type: string
      description:
        description: Detailed product description (public)
        type: string
      id:
        description: Unique product identifier (public)
        type: integer
      images:
        description: List of product images (public)
        items:
          $ref: '#/definitions/types.ProductImage'
        type: array
      isActive:
        description: Whether the product is active/available (public)
        type: boolean
      name:
        description: Name of the product (public)
        type: string
      offer:
        allOf:
        - $ref: '#/definitions/types.ProductOffer'
        description: Current offer/discount, if any (public, optional)
      price:
        description: Current price of the product (public)
        type: number
      shipmentFactor:
        description: Factor used to calculate shipping costs (public)
        type: number
      slug:
        description: URL-friendly product identifier (public)
        type: string
      specs:
        description: List of product specifications (public)
        items:
          $ref: '#/definitions/types.ProductSpec'
        type: array
      store:
        allOf:
        - $ref: '#/definitions/types.StoreInfo'
        description: Store information (public)
      subcategory:
        allOf:
        - $ref: '#/definitions/types.ProductCategoryWithParents'
        description: Subcategory information with parent hierarchy (public)
      subcategoryId:
        description: ID of the subcategory this product belongs to (public)
        type: integer
      tags:
        description: List of tags assigned to the product (public)
        items:
          $ref: '#/definitions/types.ProductTag'
        type: array
      updatedAt:
        description: When the product was last updated (public)
        type: string
      variants:
        description: List of available variants with attributes (public)
        items:
          $ref: '#/definitions/types.ProductVariantWithAttributeSet'
        type: array
    type: object
  types.ProductImage:
    properties:
      id:
        description: Unique image identifier (public)
        type: integer
      imageName:
        description: Filename of the image (public)
        type: string
      isMain:
        description: Whether this is the main product image (public)
        type: boolean
      productId:
        description: ID of the product this image belongs to (public)
        type: integer
    type: object
  types.ProductInventoryResponse:
    properties:
      inStock:
        description: If the quantity is greater than 0
        type: boolean
      total:
        description: Total quantity of the product
        type: integer
    type: object
  types.ProductOffer:
    properties:
      createdAt:
        description: When the offer was created (public)
        type: string
      discount:
        description: Discount percentage (public)
        type: number
      expireAt:
        description: When the offer expires (public)
        type: string
      id:
        description: Unique offer identifier (public)
        type: integer
      productId:
        description: ID of the product this offer applies to (public)
        type: integer
      updatedAt:
        description: When the offer was last updated (public)
        type: string
    type: object
  types.ProductSpec:
    properties:
      id:
        description: Unique specification identifier (public)
        type: integer
      label:
        description: Label/name of the specification (public)
        type: string
      productId:
        description: ID of the product this spec belongs to (public)
        type: integer
      value:
        description: Value of the specification (public)
        type: string
    type: object
  types.ProductTag:
    properties:
      createdAt:
        description: When the tag was created (public)
        type: string
      id:
        description: Unique tag identifier (public)
        type: integer
      name:
        description: Name of the tag (public)
        type: string
      updatedAt:
        description: When the tag was last updated (public)
        type: string
    type: object
  types.ProductVariantAttributeSetPayload:
    properties:
      attributeId:
        description: Attribute ID (required)
        type: integer
      optionId:
        description: Selected option ID (required)
        type: integer
    required:
    - attributeId
    - optionId
    type: object
  types.ProductVariantSelectedAttributeOption:
    properties:
      id:
        description: Unique attribute identifier (public)
        type: integer
      label:
        description: Name/label of the attribute (public)
        type: string
      selectedOption:
        allOf:
        - $ref: '#/definitions/types.ProductAttributeOption'
        description: The selected option for this attribute (public)
    type: object
  types.ProductVariantWithAttributeSet:
    properties:
      attributeSet:
        description: Complete set of attributes defining this variant (public)
        items:
          $ref: '#/definitions/types.ProductVariantSelectedAttributeOption'
        type: array
      id:
        description: Unique variant identifier (public)
        type: integer
      productId:
        description: ID of the product this variant belongs to (public)
        type: integer
      quantity:
        description: Current stock quantity (public)
        type: integer
    type: object
  types.ResetPasswordPayload:
    properties:
      newPassword:
        description: New password to set (6-130 characters, required)
        maxLength: 130
        minLength: 6
        type: string
    required:
    - newPassword
    type: object
  types.Resource:
    enum:
    - full_access
    - roles_and_permissions
    - users_full_access
    - wallet_transactions_full_access
    - stores_full_access
    - orders_full_access
    type: string
    x-enum-varnames:
    - ResourceFullAccess
    - ResourceRolesAndPermissions
    - ResourceUsersFullAccess
    - ResourceWalletTransactionsFullAccess
    - ResourceStoresFullAccess
    - ResourceOrdersFullAccess
  types.Role:
    properties:
      createdAt:
        description: When the role was created (needs permission)
        type: string
      description:
        description: Description of the role (needs permission)
        type: string
      id:
        description: Unique identifier for the role (needs permission)
        type: integer
      name:
        description: Name of the role (needs permission)
        type: string
      updatedAt:
        description: When the role was last updated (needs permission)
        type: string
    type: object
  types.RoleGroupAssignmentPayload:
    properties:
      groupIds:
        description: IDs of permission groups to assign (at least one required)
        items:
          type: integer
        type: array
      roleId:
        description: ID of the role to assign groups to (required)
        type: integer
    type: object
  types.RoleWithPermissionGroups:
    properties:
      createdAt:
        description: When the role was created (needs permission)
        type: string
      description:
        description: Description of the role (needs permission)
        type: string
      id:
        description: Unique identifier for the role (needs permission)
        type: integer
      name:
        description: Name of the role (needs permission)
        type: string
      permissionGroups:
        description: List of permission groups assigned to this role (needs permission)
        items:
          $ref: '#/definitions/types.PermissionGroup'
        type: array
      updatedAt:
        description: When the role was last updated (needs permission)
        type: string
    type: object
  types.Store:
    properties:
      createdAt:
        description: When the store was created
        type: string
      description:
        description: Description of the store
        type: string
      id:
        description: Unique identifier for the store
        type: integer
      name:
        description: Name of the store
        type: string
      ownerId:
        description: ID of the store owner (visibility depends on settings, needs
          permission)
        type: integer
      updatedAt:
        description: When the store was last updated
        type: string
      verified:
        description: Whether the store is verified (private, needs permission)
        type: boolean
    type: object
  types.StoreAddress:
    properties:
      city:
        description: City (visibility depends on isPublic, needs permission)
        type: string
      createdAt:
        description: When the address was added
        type: string
      details:
        description: Additional details (visibility depends on isPublic, needs permission)
        type: string
      id:
        description: Address ID
        type: integer
      isPublic:
        description: Whether the address is publicly visible
        type: boolean
      state:
        description: State/Province (visibility depends on isPublic, needs permission)
        type: string
      storeId:
        description: ID of the store this address belongs to
        type: integer
      street:
        description: Street address (visibility depends on isPublic, needs permission)
        type: string
      updatedAt:
        description: When the address was last updated
        type: string
      zipcode:
        description: Zip/Postal code (visibility depends on isPublic, needs permission)
        type: string
    type: object
  types.StoreInfo:
    properties:
      id:
        description: Store ID
        type: integer
      name:
        description: Store name
        type: string
    type: object
  types.StorePhoneNumber:
    properties:
      countryCode:
        description: Country code (visibility depends on isPublic, needs permission)
        type: string
      createdAt:
        description: When the number was added
        type: string
      id:
        description: Phone number ID
        type: integer
      isPublic:
        description: Whether the number is publicly visible
        type: boolean
      number:
        description: Phone number (visibility depends on isPublic, needs permission)
        type: string
      storeId:
        description: ID of the store this number belongs to
        type: integer
      updatedAt:
        description: When the number was last updated
        type: string
      verified:
        description: Whether the number is verified (visibility depends on isPublic,
          needs permission)
        type: boolean
    type: object
  types.StoreSettings:
    properties:
      id:
        description: Settings ID
        type: integer
      publicOwner:
        description: Whether owner information is public
        type: boolean
      storeId:
        description: ID of the store these settings belong to
        type: integer
      updatedAt:
        description: When settings were last updated
        type: string
    type: object
  types.TotalPageCountResponse:
    properties:
      pages:
        description: Total pages count
        type: integer
    type: object
  types.TransactionStatus:
    enum:
    - pending
    - successful
    - failed
    type: string
    x-enum-varnames:
    - TransactionStatusPending
    - TransactionStatusSuccessful
    - TransactionStatusFailed
  types.TransactionType:
    enum:
    - deposit
    - withdraw
    type: string
    x-enum-varnames:
    - TransactionTypeDeposit
    - TransactionTypeWithdraw
  types.UpdateOrderShipmentPayload:
    properties:
      arrivalDate:
        description: Updated estimated arrival date
        type: string
      status:
        allOf:
        - $ref: '#/definitions/types.OrderShipmentStatus'
        description: New status for the shipment
    type: object
  types.UpdatePermissionGroupPayload:
    properties:
      description:
        description: New description for the permission group
        type: string
      name:
        description: New name for the permission group (1+ characters if provided)
        type: string
    type: object
  types.UpdateProductAttributePayload:
    properties:
      delOptionIds:
        description: Option IDs to remove
        items:
          type: integer
        type: array
      label:
        description: New attribute label
        type: string
      newOptions:
        description: New options to add
        items:
          type: string
        type: array
      updatedOptions:
        description: Existing options to update
        items:
          $ref: '#/definitions/types.UpdatedProductAttributeOptionPayload'
        type: array
    type: object
  types.UpdateProductBasePayload:
    properties:
      description:
        description: New product description
        type: string
      isActive:
        description: New active status
        type: boolean
      name:
        description: New product name
        type: string
      price:
        description: New product price
        type: number
      shipmentFactor:
        description: New shipping cost factor
        type: number
      slug:
        description: New URL-friendly slug
        type: string
      subcategoryId:
        description: New subcategory ID
        type: integer
    type: object
  types.UpdateProductCategoryPayload:
    properties:
      imageName:
        description: New image filename
        type: string
      name:
        description: New name for the category
        type: string
    type: object
  types.UpdateProductCommentPayload:
    properties:
      comment:
        description: Updated comment text
        type: string
      scoring:
        description: New rating score
        type: integer
    type: object
  types.UpdateProductOfferPayload:
    properties:
      discount:
        description: New discount percentage
        type: number
      expireAt:
        description: New expiration date
        type: string
    type: object
  types.UpdateProductPayload:
    properties:
      base:
        allOf:
        - $ref: '#/definitions/types.UpdateProductBasePayload'
        description: Base product updates
      delImageIds:
        description: Image IDs to remove
        items:
          type: integer
        type: array
      delSpecIds:
        description: Spec IDs to remove
        items:
          type: integer
        type: array
      delTagIds:
        description: Tag IDs to remove
        items:
          type: integer
        type: array
      delVariantIds:
        description: Variant IDs to remove
        items:
          type: integer
        type: array
      newImages:
        description: New images to add
        items:
          $ref: '#/definitions/types.CreateProductImagePayload'
        type: array
      newMainImage:
        description: ID of the new main image
        type: integer
      newSpecs:
        description: New specs to add
        items:
          $ref: '#/definitions/types.CreateProductSpecPayload'
        type: array
      newTagIds:
        description: New tag IDs to add
        items:
          type: integer
        type: array
      newVariants:
        description: New variants to add
        items:
          $ref: '#/definitions/types.CreateProductVariantPayload'
        type: array
      updatedSpecs:
        description: Existing specs to update
        items:
          $ref: '#/definitions/types.UpdatedProductSpecPayload'
        type: array
      updatedVariants:
        description: Existing variants to update
        items:
          $ref: '#/definitions/types.UpdatedProductVariantPayload'
        type: array
    type: object
  types.UpdateProductTagPayload:
    properties:
      name:
        description: New name for the tag
        type: string
    type: object
  types.UpdateRolePayload:
    properties:
      description:
        description: New description for the role
        type: string
      name:
        description: New name for the role (1+ characters if provided)
        type: string
    type: object
  types.UpdateStoreAddressPayload:
    properties:
      city:
        description: New city
        type: string
      details:
        description: New additional details
        type: string
      isPublic:
        description: New visibility status
        type: boolean
      state:
        description: New state/province
        type: string
      street:
        description: New street address
        type: string
      zipcode:
        description: New zip/postal code
        type: string
    type: object
  types.UpdateStorePayload:
    properties:
      description:
        description: New store description
        type: string
      name:
        description: New store name
        type: string
      verified:
        description: New verification status
        type: boolean
    type: object
  types.UpdateStorePhoneNumberPayload:
    properties:
      countryCode:
        description: New country code (1-4 characters)
        maxLength: 4
        minLength: 1
        type: string
      isPublic:
        description: New visibility status
        type: boolean
      number:
        description: New phone number (5-20 characters)
        maxLength: 20
        minLength: 5
        type: string
      verified:
        description: New verification status
        type: boolean
    type: object
  types.UpdateStoreSettingsPayload:
    properties:
      publicOwner:
        description: New owner visibility setting
        type: boolean
    type: object
  types.UpdateUserAddressPayload:
    properties:
      city:
        description: New city
        type: string
      details:
        description: New additional details
        type: string
      isPublic:
        description: Whether the address should be public
        type: boolean
      state:
        description: New state/province
        type: string
      street:
        description: New street address
        type: string
      zipcode:
        description: New zip/postal code
        type: string
    type: object
  types.UpdateUserPasswordPayload:
    properties:
      currentPassword:
        description: Current password (6-130 characters)
        maxLength: 130
        minLength: 6
        type: string
      newPassword:
        description: New password (6-130 characters)
        maxLength: 130
        minLength: 6
        type: string
    type: object
  types.UpdateUserPayload:
    properties:
      birthDate:
        description: New birth date
        type: string
      email:
        description: New email address
        type: string
      emailVerified:
        description: Email verification status
        type: boolean
      fullName:
        description: New full name
        type: string
      isBanned:
        description: Ban status
        type: boolean
      password:
        description: New password (6-130 characters)
        maxLength: 130
        minLength: 6
        type: string
      username:
        description: New username (5+ characters)
        minLength: 5
        type: string
    type: object
  types.UpdateUserPhoneNumberPayload:
    properties:
      countryCode:
        description: New country code (1-4 characters)
        maxLength: 4
        minLength: 1
        type: string
      isPublic:
        description: Whether the number should be public
        type: boolean
      number:
        description: New phone number (5-20 characters)
        maxLength: 20
        minLength: 5
        type: string
      verified:
        description: Verification status
        type: boolean
    type: object
  types.UpdateUserSettingsPayload:
    properties:
      isUsingDarkTheme:
        description: Whether to use dark theme
        type: boolean
      language:
        description: Preferred language
        type: string
      publicBirthDate:
        description: Whether birth date should be public
        type: boolean
      publicEmail:
        description: Whether email should be public
        type: boolean
    type: object
  types.UpdatedProductAttributeOptionPayload:
    properties:
      id:
        description: ID of the option to update
        type: integer
      value:
        description: New option value
        type: string
    type: object
  types.UpdatedProductSpecPayload:
    properties:
      id:
        description: ID of the spec to update
        type: integer
      label:
        description: New specification label
        type: string
      value:
        description: New specification value
        type: string
    type: object
  types.UpdatedProductVariantPayload:
    properties:
      delAttributeIds:
        description: Attribute IDs to remove
        items:
          type: integer
        type: array
      id:
        description: ID of the variant to update
        type: integer
      newAttributeSets:
        description: New attribute sets to add
        items:
          $ref: '#/definitions/types.ProductVariantAttributeSetPayload'
        type: array
      quantity:
        description: New stock quantity
        type: integer
    type: object
  types.User:
    properties:
      birthDate:
        description: Birth date of the user (visibility depends on settings, needs
          permission)
        format: date-time
        type: string
      createdAt:
        description: When the user was created
        type: string
      email:
        description: Email address of the user (visibility depends on settings, needs
          permission)
        type: string
      emailVerified:
        description: Indicates if email is verified (visibility depends on settings,
          needs permission)
        type: boolean
      fullName:
        description: Full name of the user
        type: string
      id:
        type: integer
      isBanned:
        description: Indicates if user is banned
        type: boolean
      roleId:
        description: Role ID of the user (private, needs permission)
        type: integer
      updatedAt:
        description: When the user was last updated
        type: string
      username:
        description: Username of the user (private, needs permission)
        type: string
    type: object
  types.UserAddress:
    properties:
      city:
        description: City (visibility depends on isPublic, needs permission)
        type: string
      createdAt:
        description: When the address was added
        type: string
      details:
        description: Additional address details (visibility depends on isPublic, needs
          permission)
        type: string
      id:
        type: integer
      isPublic:
        description: Whether the address is public
        type: boolean
      state:
        description: State/Province (visibility depends on isPublic, needs permission)
        type: string
      street:
        description: Street address (visibility depends on isPublic, needs permission)
        type: string
      updatedAt:
        description: When the address was last updated
        type: string
      userId:
        description: ID of the user this address belongs to
        type: integer
      zipcode:
        description: Zip/Postal code (visibility depends on isPublic, needs permission)
        type: string
    type: object
  types.UserPhoneNumber:
    properties:
      countryCode:
        description: Country code (visibility depends on isPublic, needs permission)
        type: string
      createdAt:
        description: When the phone number was added
        type: string
      id:
        type: integer
      isPublic:
        description: Whether the phone number is public
        type: boolean
      number:
        description: Phone number (visibility depends on isPublic, needs permission)
        type: string
      updatedAt:
        description: When the phone number was last updated
        type: string
      userId:
        description: ID of the user this phone number belongs to
        type: integer
      verified:
        description: Whether the phone number is verified (visibility depends on isPublic,
          needs permission)
        type: boolean
    type: object
  types.UserSettings:
    properties:
      id:
        type: integer
      isUsingDarkTheme:
        description: Whether dark theme is enabled
        type: boolean
      language:
        description: User's preferred language
        type: string
      publicBirthDate:
        description: Whether birth date is public
        type: boolean
      publicEmail:
        description: Whether email is public
        type: boolean
      updatedAt:
        description: When settings were last updated
        type: string
      userId:
        description: ID of the user these settings belong to
        type: integer
    type: object
  types.Wallet:
    properties:
      balance:
        description: Current balance in the wallet (private, needs permission)
        type: number
      createdAt:
        description: When the wallet was created (private, needs permission)
        type: string
      id:
        description: Wallet ID (private, needs permission)
        type: integer
      updatedAt:
        description: When the wallet was last updated (private, needs permission)
        type: string
      userId:
        description: ID of the user who owns this wallet (private, needs permission)
        type: integer
    type: object
  types.WalletTransaction:
    properties:
      amount:
        description: Transaction amount (private, needs permission)
        type: number
      createdAt:
        description: When the transaction was created (private, needs permission)
        type: string
      id:
        description: Transaction ID (private, needs permission)
        type: integer
      status:
        allOf:
        - $ref: '#/definitions/types.TransactionStatus'
        description: Current status of the transaction (private, needs permission)
      txType:
        allOf:
        - $ref: '#/definitions/types.TransactionType'
        description: Type of transaction (credit/debit/etc) (private, needs permission)
      updatedAt:
        description: When the transaction was last updated (private, needs permission)
        type: string
      walletId:
        description: ID of the wallet this transaction belongs to (private, needs
          permission)
        type: integer
    type: object
host: localhost:5000
info:
  contact: {}
  description: This is the backend API for EcoNest, an e-commerce platform.
  title: EcoNest API
  version: 0.1.0 (BETA)
paths:
  /order:
    get:
      description: Retrieves a paginated list of orders with optional filtering. Requires
        orders full access permission.
      parameters:
      - description: Filter by user ID
        in: query
        name: user
        type: integer
      - description: Filter by store ID
        in: query
        name: store
        type: integer
      - description: Filter by payment status
        in: query
        name: paystat
        type: string
      - description: Filter by shipment status
        in: query
        name: shipstat
        type: string
      - description: Filter by created before date (RFC3339)
        in: query
        name: calt
        type: string
      - description: Filter by created after date (RFC3339)
        in: query
        name: camt
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: p
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.Order'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get orders list
      tags:
      - order
    post:
      consumes:
      - application/json
      description: Creates a new order with the provided details. Requires create
        order permission.
      parameters:
      - description: Order details
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/types.CreateOrderPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/types.NewOrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Create a new order
      tags:
      - order
  /order/{orderId}:
    delete:
      description: Permanently deletes an order. Requires delete order permission.
      parameters:
      - description: Order ID
        in: path
        name: orderId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Order deleted
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Delete an order
      tags:
      - order
    get:
      description: Retrieves full details for a specific order. Requires orders full
        access permission.
      parameters:
      - description: Order ID
        in: path
        name: orderId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Order'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get order details
      tags:
      - order
  /order/{orderId}/products:
    get:
      description: Retrieves product variants for a specific order. Requires orders
        full access permission.
      parameters:
      - description: Order ID
        in: path
        name: orderId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.OrderProductVariantInfo'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get order products
      tags:
      - order
  /order/cancel/{orderId}:
    patch:
      description: Marks an order's payment as cancelled. Requires cancel order payment
        permission.
      parameters:
      - description: Order ID
        in: path
        name: orderId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Order payment cancelled
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Cancel order payment
      tags:
      - order
  /order/complete/{orderId}:
    patch:
      description: Marks an order's payment as completed. Requires complete order
        payment permission.
      parameters:
      - description: Order ID
        in: path
        name: orderId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Order payment completed
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Complete order payment
      tags:
      - order
  /order/me:
    get:
      description: Retrieves a paginated list of orders for the current user with
        optional filtering.
      parameters:
      - description: Filter by store ID
        in: query
        name: store
        type: integer
      - description: Filter by payment status
        in: query
        name: paystat
        type: string
      - description: Filter by shipment status
        in: query
        name: shipstat
        type: string
      - description: Filter by created before date (RFC3339)
        in: query
        name: calt
        type: string
      - description: Filter by created after date (RFC3339)
        in: query
        name: camt
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: p
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.Order'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get current user's orders
      tags:
      - order
  /order/me/{orderId}:
    get:
      description: Retrieves full details for a specific order belonging to the current
        user.
      parameters:
      - description: Order ID
        in: path
        name: orderId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Order'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get current user's order
      tags:
      - order
  /order/me/{orderId}/products:
    get:
      description: Retrieves product variants for a specific order belonging to the
        current user.
      parameters:
      - description: Order ID
        in: path
        name: orderId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.OrderProductVariantInfo'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get current user's order products
      tags:
      - order
  /order/me/pages:
    get:
      description: Calculates the total number of pages available for the current
        user's orders listing.
      parameters:
      - description: Filter by store ID
        in: query
        name: store
        type: integer
      - description: Filter by payment status
        in: query
        name: paystat
        type: string
      - description: Filter by shipment status
        in: query
        name: shipstat
        type: string
      - description: Filter by created before date (RFC3339)
        in: query
        name: calt
        type: string
      - description: Filter by created after date (RFC3339)
        in: query
        name: camt
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.TotalPageCountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get current user's orders pages count
      tags:
      - order
  /order/pages:
    get:
      description: Calculates the total number of pages available for orders listing
        based on filters. Requires orders full access permission.
      parameters:
      - description: Filter by user ID
        in: query
        name: user
        type: integer
      - description: Filter by store ID
        in: query
        name: store
        type: integer
      - description: Filter by payment status
        in: query
        name: paystat
        type: string
      - description: Filter by shipment status
        in: query
        name: shipstat
        type: string
      - description: Filter by created before date (RFC3339)
        in: query
        name: calt
        type: string
      - description: Filter by created after date (RFC3339)
        in: query
        name: camt
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.TotalPageCountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get total orders pages count
      tags:
      - order
  /order/shipment/{orderId}:
    patch:
      consumes:
      - application/json
      description: Updates shipment details for an order. Requires update order shipment
        permission.
      parameters:
      - description: Order ID
        in: path
        name: orderId
        required: true
        type: integer
      - description: Shipment details
        in: body
        name: shipment
        required: true
        schema:
          $ref: '#/definitions/types.UpdateOrderShipmentPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Order shipment updated
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Update order shipment
      tags:
      - order
  /order/store/{storeId}:
    get:
      description: Retrieves a paginated list of orders for a specific store with
        optional filtering. Requires orders full access permission.
      parameters:
      - description: Store ID
        in: path
        name: storeId
        required: true
        type: integer
      - description: Filter by user ID
        in: query
        name: user
        type: integer
      - description: Filter by payment status
        in: query
        name: paystat
        type: string
      - description: Filter by shipment status
        in: query
        name: shipstat
        type: string
      - description: Filter by created before date (RFC3339)
        in: query
        name: calt
        type: string
      - description: Filter by created after date (RFC3339)
        in: query
        name: camt
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: p
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.Order'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get store's orders
      tags:
      - order
  /order/store/{storeId}/pages:
    get:
      description: Calculates the total number of pages available for a store's orders
        listing. Requires orders full access permission.
      parameters:
      - description: Store ID
        in: path
        name: storeId
        required: true
        type: integer
      - description: Filter by user ID
        in: query
        name: user
        type: integer
      - description: Filter by payment status
        in: query
        name: paystat
        type: string
      - description: Filter by shipment status
        in: query
        name: shipstat
        type: string
      - description: Filter by created before date (RFC3339)
        in: query
        name: calt
        type: string
      - description: Filter by created after date (RFC3339)
        in: query
        name: camt
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.TotalPageCountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get store's orders pages count
      tags:
      - order
  /order/store/me/{storeId}:
    get:
      description: Retrieves a paginated list of orders for the current user's store
        with optional filtering.
      parameters:
      - description: Store ID
        in: path
        name: storeId
        required: true
        type: integer
      - description: Filter by user ID
        in: query
        name: user
        type: integer
      - description: Filter by payment status
        in: query
        name: paystat
        type: string
      - description: Filter by shipment status
        in: query
        name: shipstat
        type: string
      - description: Filter by created before date (RFC3339)
        in: query
        name: calt
        type: string
      - description: Filter by created after date (RFC3339)
        in: query
        name: camt
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: p
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.Order'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get current user's store orders
      tags:
      - order
  /order/store/me/{storeId}/{orderId}:
    get:
      description: Retrieves full details for a specific order belonging to the current
        user's store.
      parameters:
      - description: Store ID
        in: path
        name: storeId
        required: true
        type: integer
      - description: Order ID
        in: path
        name: orderId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Order'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get current user's store order
      tags:
      - order
  /order/store/me/{storeId}/{orderId}/products:
    get:
      description: Retrieves product variants for a specific order belonging to the
        current user's store.
      parameters:
      - description: Store ID
        in: path
        name: storeId
        required: true
        type: integer
      - description: Order ID
        in: path
        name: orderId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.OrderProductVariantInfo'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get current user's store order products
      tags:
      - order
  /order/store/me/{storeId}/pages:
    get:
      description: Calculates the total number of pages available for the current
        user's store orders listing.
      parameters:
      - description: Store ID
        in: path
        name: storeId
        required: true
        type: integer
      - description: Filter by user ID
        in: query
        name: user
        type: integer
      - description: Filter by payment status
        in: query
        name: paystat
        type: string
      - description: Filter by shipment status
        in: query
        name: shipstat
        type: string
      - description: Filter by created before date (RFC3339)
        in: query
        name: calt
        type: string
      - description: Filter by created after date (RFC3339)
        in: query
        name: camt
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.TotalPageCountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get current user's store orders pages count
      tags:
      - order
  /order/user/{userId}:
    get:
      description: Retrieves a paginated list of orders for a specific user with optional
        filtering. Requires orders full access permission.
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      - description: Filter by store ID
        in: query
        name: store
        type: integer
      - description: Filter by payment status
        in: query
        name: paystat
        type: string
      - description: Filter by shipment status
        in: query
        name: shipstat
        type: string
      - description: Filter by created before date (RFC3339)
        in: query
        name: calt
        type: string
      - description: Filter by created after date (RFC3339)
        in: query
        name: camt
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: p
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.Order'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get user's orders
      tags:
      - order
  /order/user/{userId}/pages:
    get:
      description: Calculates the total number of pages available for a user's orders
        listing. Requires orders full access permission.
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      - description: Filter by store ID
        in: query
        name: store
        type: integer
      - description: Filter by payment status
        in: query
        name: paystat
        type: string
      - description: Filter by shipment status
        in: query
        name: shipstat
        type: string
      - description: Filter by created before date (RFC3339)
        in: query
        name: calt
        type: string
      - description: Filter by created after date (RFC3339)
        in: query
        name: camt
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.TotalPageCountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get user's orders pages count
      tags:
      - order
  /pgroup:
    get:
      description: Retrieves a list of permission groups with optional name filtering
      parameters:
      - description: Filter permission groups by name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.PermissionGroup'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get permission groups
      tags:
      - role and permission
    post:
      consumes:
      - application/json
      description: Creates a new permission group
      parameters:
      - description: Permission group details
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/types.CreatePermissionGroupPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/types.NewPermissionGroupResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Create permission group
      tags:
      - role and permission
  /pgroup/{pgroupId}:
    delete:
      description: Deletes an existing permission group
      parameters:
      - description: Permission group ID
        in: path
        name: pgroupId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Permission group deleted
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Delete permission group
      tags:
      - role and permission
    get:
      description: Retrieves a specific permission group by its ID including permissions
      parameters:
      - description: Permission group ID
        in: path
        name: pgroupId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PermissionGroupWithPermissions'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get permission group by ID
      tags:
      - role and permission
    patch:
      consumes:
      - application/json
      description: Updates an existing permission group
      parameters:
      - description: Permission group ID
        in: path
        name: pgroupId
        required: true
        type: integer
      - description: Permission group details
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/types.UpdatePermissionGroupPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Permission group updated
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Update permission group
      tags:
      - role and permission
  /pgroup/add/act:
    put:
      consumes:
      - application/json
      description: Assigns action permissions to a permission group
      parameters:
      - description: Group ID and actions
        in: body
        name: permissions
        required: true
        schema:
          $ref: '#/definitions/types.GroupActionPermissionAssignmentPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Action permission added to permission group
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Add action permissions to group
      tags:
      - role and permission
  /pgroup/add/rsrc:
    put:
      consumes:
      - application/json
      description: Assigns resource permissions to a permission group
      parameters:
      - description: Group ID and resources
        in: body
        name: permissions
        required: true
        schema:
          $ref: '#/definitions/types.GroupResourcePermissionAssignmentPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Resource permission added to permission group
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Add resource permissions to group
      tags:
      - role and permission
  /pgroup/byname/{pgroupName}:
    get:
      description: Retrieves a specific permission group by its name including permissions
      parameters:
      - description: Permission group name
        in: path
        name: pgroupName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PermissionGroupWithPermissions'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get permission group by name
      tags:
      - role and permission
  /pgroup/full:
    get:
      description: Retrieves a list of permission groups with their associated permissions
      parameters:
      - description: Filter permission groups by name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.PermissionGroupWithPermissions'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get permission groups with permissions
      tags:
      - role and permission
  /pgroup/rmv/act:
    put:
      consumes:
      - application/json
      description: Removes action permissions from a permission group
      parameters:
      - description: Group ID and actions
        in: body
        name: permissions
        required: true
        schema:
          $ref: '#/definitions/types.GroupActionPermissionAssignmentPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Action permission removed from permission group
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Remove action permissions from group
      tags:
      - role and permission
  /pgroup/rmv/rsrc:
    put:
      consumes:
      - application/json
      description: Removes resource permissions from a permission group
      parameters:
      - description: Group ID and resources
        in: body
        name: permissions
        required: true
        schema:
          $ref: '#/definitions/types.GroupResourcePermissionAssignmentPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Resource permission removed from permission group
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Remove resource permissions from group
      tags:
      - role and permission
  /product:
    get:
      description: Retrieves a paginated list of products with optional filtering
      parameters:
      - description: Search keyword
        in: query
        name: k
        type: string
      - description: Minimum quantity filter
        in: query
        name: minq
        type: integer
      - description: Filter products with offers
        in: query
        name: offr
        type: boolean
      - description: Filter by category ID
        in: query
        name: cat
        type: integer
      - description: Filter by tag ID
        in: query
        name: tag
        type: integer
      - description: Filter products with price more than value
        in: query
        name: pmt
        type: integer
      - description: Filter products with price less than value
        in: query
        name: plt
        type: integer
      - description: Filter by store ID
        in: query
        name: store
        type: integer
      - description: 'Page number (default: 1)'
        in: query
        name: p
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.Product'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      summary: Get products
      tags:
      - product
    post:
      consumes:
      - application/json
      description: Creates a new product with the provided details
      parameters:
      - description: Product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/types.CreateProductPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/types.NewProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Create a product
      tags:
      - product
  /product/{productId}:
    delete:
      description: Permanently deletes a product
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product deleted successfully
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Delete a product
      tags:
      - product
    get:
      description: Retrieves details of a specific product by ID
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      summary: Get a product
      tags:
      - product
    patch:
      consumes:
      - application/json
      description: Updates an existing product with the provided details
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: integer
      - description: Product update details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/types.UpdateProductPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Product updated successfully
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Update a product
      tags:
      - product
  /product/{productId}/extended:
    get:
      description: Retrieves extended details of a specific product by ID including
        additional information
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.ProductExtended'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      summary: Get extended product details
      tags:
      - product
  /product/{productId}/inventory:
    get:
      description: Retrieves inventory information for a specific product by ID
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Returns object with total and inStock counts
          schema:
            $ref: '#/definitions/types.ProductInventoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      summary: Get product inventory
      tags:
      - product
  /product/active/{productId}:
    patch:
      description: Sets a product's active status to true
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product activated successfully
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Activate a product
      tags:
      - product
  /product/attribute:
    get:
      description: Retrieves a paginated list of product attributes with optional
        filtering
      parameters:
      - description: Filter by attribute label
        in: query
        name: label
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: p
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.ProductAttributeWithOptions'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      summary: Get product attributes
      tags:
      - product
    post:
      consumes:
      - application/json
      description: Creates a new product attribute with options
      parameters:
      - description: Attribute details
        in: body
        name: attribute
        required: true
        schema:
          $ref: '#/definitions/types.CreateProductAttributePayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/types.NewProductAttributeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Create a product attribute
      tags:
      - product
  /product/attribute/{attributeId}:
    delete:
      description: Permanently deletes a product attribute
      parameters:
      - description: Attribute ID
        in: path
        name: attributeId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product attribute deleted
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Delete a product attribute
      tags:
      - product
    get:
      description: Retrieves details of a specific product attribute by ID including
        options
      parameters:
      - description: Attribute ID
        in: path
        name: attributeId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.ProductAttributeWithOptions'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      summary: Get a product attribute
      tags:
      - product
    patch:
      consumes:
      - application/json
      description: Updates an existing product attribute
      parameters:
      - description: Attribute ID
        in: path
        name: attributeId
        required: true
        type: integer
      - description: Attribute update details
        in: body
        name: attribute
        required: true
        schema:
          $ref: '#/definitions/types.UpdateProductAttributePayload'
      produces:
      - application/json
      responses:
        "200":
          description: Product attribute updated
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Update a product attribute
      tags:
      - product
  /product/attribute/pages:
    get:
      description: Returns the total number of pages available for product attributes
        based on filters
      parameters:
      - description: Filter by attribute label
        in: query
        name: label
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.TotalPageCountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      summary: Get product attributes page count
      tags:
      - product
  /product/category:
    get:
      description: Retrieves a paginated list of product categories with optional
        filtering
      parameters:
      - description: Filter by category name
        in: query
        name: name
        type: string
      - description: Filter by parent category ID
        in: query
        name: parent
        type: integer
      - description: 'Page number (default: 1)'
        in: query
        name: p
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.ProductCategory'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      summary: Get product categories
      tags:
      - product
    post:
      consumes:
      - application/json
      description: Creates a new product category
      parameters:
      - description: Category details
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/types.CreateProductCategoryPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/types.NewProductCategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Create a product category
      tags:
      - product
  /product/category/{categoryId}:
    delete:
      description: Permanently deletes a product category
      parameters:
      - description: Category ID
        in: path
        name: categoryId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product category deleted
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Delete a product category
      tags:
      - product
    get:
      description: Retrieves details of a specific product category by ID
      parameters:
      - description: Category ID
        in: path
        name: categoryId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.ProductCategory'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      summary: Get a product category
      tags:
      - product
    patch:
      consumes:
      - application/json
      description: Updates an existing product category
      parameters:
      - description: Category ID
        in: path
        name: categoryId
        required: true
        type: integer
      - description: Category update details
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/types.UpdateProductCategoryPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Product category updated
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Update a product category
      tags:
      - product
  /product/category/full:
    get:
      description: Retrieves a paginated list of product categories including parent
        category information
      parameters:
      - description: Filter by category name
        in: query
        name: name
        type: string
      - description: Filter by parent category ID
        in: query
        name: parent
        type: integer
      - description: 'Page number (default: 1)'
        in: query
        name: p
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.ProductCategoryWithParents'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      summary: Get product categories with parent info
      tags:
      - product
  /product/category/image:
    post:
      consumes:
      - multipart/form-data
      description: 'Uploads an image for a product category (requires authentication
        and permissions). Max size 3MB, allowed types: jpeg, png, jpg, webp.'
      parameters:
      - description: Category image file
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.FileUploadResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "413":
          description: Request Entity Too Large
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Upload product category image
      tags:
      - product
  /product/category/image/{filename}:
    get:
      description: 'Retrieves a product category image file by filename. Supported
        formats: jpeg, png, jpg, webp.'
      parameters:
      - description: Image filename
        in: path
        name: filename
        required: true
        type: string
      produces:
      - image/jpeg
      - image/png
      - image/jpg
      - image/webp
      responses:
        "200":
          description: Image file
          schema:
            type: file
        "400":
          description: Invalid filename
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: File not found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.HTTPError'
      summary: Get product category image
      tags:
      - product
  /product/category/pages:
    get:
      description: Returns the total number of pages available for product categories
        based on filters
      parameters:
      - description: Filter by category name
        in: query
        name: name
        type: string
      - description: Filter by parent category ID
        in: query
        name: parent
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.TotalPageCountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      summary: Get product category page count
      tags:
      - product
  /product/comment/{commentId}:
    delete:
      description: Deletes any product comment (requires admin permissions)
      parameters:
      - description: Comment ID
        in: path
        name: commentId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product comment deleted
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Delete a product comment (admin)
      tags:
      - product
    get:
      description: Retrieves details of a specific product comment by ID
      parameters:
      - description: Comment ID
        in: path
        name: commentId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.ProductComment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      summary: Get a product comment
      tags:
      - product
  /product/comment/{productId}:
    post:
      consumes:
      - application/json
      description: Creates a new comment on a product
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: integer
      - description: Comment details
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/types.CreateProductCommentPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/types.NewProductCommentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Create a product comment
      tags:
      - product
  /product/comment/me/{commentId}:
    delete:
      description: Deletes a comment made by the current user
      parameters:
      - description: Comment ID
        in: path
        name: commentId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product comment deleted
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Delete my comment
      tags:
      - product
    patch:
      consumes:
      - application/json
      description: Updates a comment made by the current user
      parameters:
      - description: Comment ID
        in: path
        name: commentId
        required: true
        type: integer
      - description: Updated comment details
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/types.UpdateProductCommentPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Product comment ddited
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Edit my comment
      tags:
      - product
  /product/comment/product/{productId}:
    get:
      description: Retrieves a paginated list of comments for a specific product with
        optional filtering
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: integer
      - description: Filter comments with score less than value
        in: query
        name: slt
        type: integer
      - description: Filter comments with score more than value
        in: query
        name: smt
        type: integer
      - description: 'Page number (default: 1)'
        in: query
        name: p
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.ProductComment'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      summary: Get product comments
      tags:
      - product
  /product/comment/product/{productId}/pages:
    get:
      description: Returns the total number of pages available for product comments
        based on filters
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: integer
      - description: Filter comments with score less than value
        in: query
        name: slt
        type: integer
      - description: Filter comments with score more than value
        in: query
        name: smt
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.TotalPageCountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      summary: Get product comments page count
      tags:
      - product
  /product/deactive/{productId}:
    patch:
      description: Sets a product's active status to false
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product deactivated successfully
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Deactivate a product
      tags:
      - product
  /product/image:
    post:
      consumes:
      - multipart/form-data
      description: 'Uploads an image for a product (requires authentication and permissions).
        Max size 3MB, allowed types: jpeg, png, jpg, webp.'
      parameters:
      - description: Product image file
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.FileUploadResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "413":
          description: Request Entity Too Large
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Upload product image
      tags:
      - product
  /product/image/{filename}:
    get:
      description: 'Retrieves a product image file by filename. Supported formats:
        jpeg, png, jpg, webp.'
      parameters:
      - description: Image filename
        in: path
        name: filename
        required: true
        type: string
      produces:
      - image/jpeg
      - image/png
      - image/jpg
      - image/webp
      responses:
        "200":
          description: Image file
          schema:
            type: file
        "400":
          description: Invalid filename
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: File not found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.HTTPError'
      summary: Get product image
      tags:
      - product
  /product/offer:
    get:
      description: Retrieves a paginated list of product offers with optional filtering
      parameters:
      - description: Filter offers with discount less than value
        in: query
        name: dlt
        type: integer
      - description: Filter offers with discount more than value
        in: query
        name: dmt
        type: integer
      - description: Filter offers expiring before timestamp
        in: query
        name: exalt
        type: integer
      - description: Filter offers expiring after timestamp
        in: query
        name: examt
        type: integer
      - description: 'Page number (default: 1)'
        in: query
        name: p
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.ProductOffer'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      summary: Get product offers
      tags:
      - product
  /product/offer/{offerId}:
    delete:
      description: Permanently deletes a product offer
      parameters:
      - description: Offer ID
        in: path
        name: offerId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product offer deleted
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Delete a product offer
      tags:
      - product
    get:
      description: Retrieves details of a specific product offer by ID
      parameters:
      - description: Offer ID
        in: path
        name: offerId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.ProductOffer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      summary: Get a product offer
      tags:
      - product
    patch:
      consumes:
      - application/json
      description: Updates an existing product offer
      parameters:
      - description: Offer ID
        in: path
        name: offerId
        required: true
        type: integer
      - description: Offer update details
        in: body
        name: offer
        required: true
        schema:
          $ref: '#/definitions/types.UpdateProductOfferPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Product offer updated
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Update a product offer
      tags:
      - product
  /product/offer/{productId}:
    post:
      consumes:
      - application/json
      description: Creates a new offer for a product
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: integer
      - description: Offer details
        in: body
        name: offer
        required: true
        schema:
          $ref: '#/definitions/types.CreateProductOfferPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/types.NewProductOfferResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Create a product offer
      tags:
      - product
  /product/offer/byproduct/{productId}:
    get:
      description: Retrieves the offer for a specific product by product ID
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.ProductOffer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      summary: Get product offer by product ID
      tags:
      - product
  /product/offer/pages:
    get:
      description: Returns the total number of pages available for product offers
        based on filters
      parameters:
      - description: Filter offers with discount less than value
        in: query
        name: dlt
        type: integer
      - description: Filter offers with discount more than value
        in: query
        name: dmt
        type: integer
      - description: Filter offers expiring before timestamp
        in: query
        name: exalt
        type: integer
      - description: Filter offers expiring after timestamp
        in: query
        name: examt
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.TotalPageCountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      summary: Get product offers page count
      tags:
      - product
  /product/pages:
    get:
      description: Returns the total number of pages available for products based
        on filters
      parameters:
      - description: Search keyword
        in: query
        name: k
        type: string
      - description: Minimum quantity filter
        in: query
        name: minq
        type: integer
      - description: Filter products with offers
        in: query
        name: offr
        type: boolean
      - description: Filter by category ID
        in: query
        name: cat
        type: integer
      - description: Filter by tag ID
        in: query
        name: tag
        type: integer
      - description: Filter products with price more than value
        in: query
        name: pmt
        type: integer
      - description: Filter products with price less than value
        in: query
        name: plt
        type: integer
      - description: Filter by store ID
        in: query
        name: store
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.TotalPageCountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      summary: Get product page count
      tags:
      - product
  /product/tag:
    get:
      description: Retrieves a paginated list of product tags with optional filtering
      parameters:
      - description: Filter by tag name
        in: query
        name: name
        type: string
      - description: Filter by product ID
        in: query
        name: product
        type: integer
      - description: 'Page number (default: 1)'
        in: query
        name: p
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.ProductTag'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      summary: Get product tags
      tags:
      - product
    post:
      consumes:
      - application/json
      description: Creates a new product tag
      parameters:
      - description: Tag details
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/types.CreateProductTagPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/types.NewProductTagResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Create a product tag
      tags:
      - product
  /product/tag/{tagId}:
    delete:
      description: Permanently deletes a product tag
      parameters:
      - description: Tag ID
        in: path
        name: tagId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product tag deleted
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Delete a product tag
      tags:
      - product
    get:
      description: Retrieves details of a specific product tag by ID
      parameters:
      - description: Tag ID
        in: path
        name: tagId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.ProductTag'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      summary: Get a product tag
      tags:
      - product
    patch:
      consumes:
      - application/json
      description: Updates an existing product tag
      parameters:
      - description: Tag ID
        in: path
        name: tagId
        required: true
        type: integer
      - description: Tag update details
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/types.UpdateProductTagPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Product tag updated
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Update a product tag
      tags:
      - product
  /product/tag/pages:
    get:
      description: Returns the total number of pages available for product tags based
        on filters
      parameters:
      - description: Filter by tag name
        in: query
        name: name
        type: string
      - description: Filter by product ID
        in: query
        name: product
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.TotalPageCountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      summary: Get product tags page count
      tags:
      - product
  /role:
    get:
      description: Retrieves a list of roles with optional name filtering
      parameters:
      - description: Filter roles by name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.Role'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get roles
      tags:
      - role and permission
    post:
      consumes:
      - application/json
      description: Creates a new role
      parameters:
      - description: Role details
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/types.CreateRolePayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/types.NewRoleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Create role
      tags:
      - role and permission
  /role/{roleId}:
    delete:
      description: Deletes an existing role
      parameters:
      - description: Role ID
        in: path
        name: roleId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Role deleted
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Delete role
      tags:
      - role and permission
    get:
      description: Retrieves a specific role by its ID including permission groups
      parameters:
      - description: Role ID
        in: path
        name: roleId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.RoleWithPermissionGroups'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get role by ID
      tags:
      - role and permission
    patch:
      consumes:
      - application/json
      description: Updates an existing role
      parameters:
      - description: Role ID
        in: path
        name: roleId
        required: true
        type: integer
      - description: Role details
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/types.UpdateRolePayload'
      produces:
      - application/json
      responses:
        "200":
          description: Role updated
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Update role
      tags:
      - role and permission
  /role/addpg:
    put:
      consumes:
      - application/json
      description: Assigns permission groups to a role
      parameters:
      - description: Role and group IDs
        in: body
        name: assignment
        required: true
        schema:
          $ref: '#/definitions/types.RoleGroupAssignmentPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Permission group added to role
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Add permission groups to role
      tags:
      - role and permission
  /role/byname/{roleName}:
    get:
      description: Retrieves a specific role by its name including permission groups
      parameters:
      - description: Role name
        in: path
        name: roleName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.RoleWithPermissionGroups'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get role by name
      tags:
      - role and permission
  /role/full:
    get:
      description: Retrieves a list of roles with their associated permission groups
      parameters:
      - description: Filter roles by name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.RoleWithPermissionGroups'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get roles with permission groups
      tags:
      - role and permission
  /role/rmvpg:
    put:
      consumes:
      - application/json
      description: Removes permission groups from a role
      parameters:
      - description: Role and group IDs
        in: body
        name: assignment
        required: true
        schema:
          $ref: '#/definitions/types.RoleGroupAssignmentPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Permission group removed from role
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Remove permission groups from role
      tags:
      - role and permission
  /store:
    get:
      description: Retrieves a paginated list of stores with optional filtering. The
        response fields are filtered based on store privacy settings and requester's
        permissions.
      parameters:
      - description: Filter stores by name (partial match)
        in: query
        name: name
        type: string
      - description: Filter stores by owner ID (requires permissions)
        in: query
        name: owner
        type: integer
      - description: 'Page number (default: 1)'
        in: query
        name: p
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of stores with filtered fields
          schema:
            items:
              $ref: '#/definitions/types.Store'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get stores list
      tags:
      - store
  /store/{storeId}:
    delete:
      description: Permanently deletes a store and all its associated data. Requires
        permission to delete stores.
      parameters:
      - description: Store ID
        in: path
        name: storeId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Store deleted
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Delete a store
      tags:
      - store
    get:
      description: Returns details for a specific store. The response fields are filtered
        based on store privacy settings and requester's permissions.
      parameters:
      - description: Store ID
        in: path
        name: storeId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Store'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get store details
      tags:
      - store
    patch:
      consumes:
      - application/json
      description: Updates details for a specific store. Requires permission to update
        stores.
      parameters:
      - description: Store ID
        in: path
        name: storeId
        required: true
        type: integer
      - description: Store update payload
        in: body
        name: store
        required: true
        schema:
          $ref: '#/definitions/types.UpdateStorePayload'
      produces:
      - application/json
      responses:
        "200":
          description: Store updated
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Update store details
      tags:
      - store
  /store/address/{addrId}:
    delete:
      consumes:
      - application/json
      description: Deletes an existing address belonging to the specified store. Requires
        permission to update stores.
      parameters:
      - description: Address ID
        in: path
        name: addrId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Address deleted
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Delete a store address
      tags:
      - address
    patch:
      consumes:
      - application/json
      description: Updates an existing address belonging to the specified store. Requires
        permission to update stores.
      parameters:
      - description: Address ID
        in: path
        name: addrId
        required: true
        type: integer
      - description: Address update payload
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/types.UpdateStoreAddressPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Address updated
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Update a store address
      tags:
      - address
  /store/address/{storeId}:
    get:
      consumes:
      - application/json
      description: Returns all addresses belonging to the specified store with optional
        filters. Response fields are filtered based on store privacy settings and
        requester's permissions.
      parameters:
      - description: Store ID
        in: path
        name: storeId
        required: true
        type: integer
      - description: Filter by visibility status (public/private)
        in: query
        name: visibility
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.StoreAddress'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get store addresses
      tags:
      - address
    post:
      consumes:
      - application/json
      description: Creates a new address for the specified store. Requires permission
        to update stores.
      parameters:
      - description: Store ID
        in: path
        name: storeId
        required: true
        type: integer
      - description: Address details
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/types.CreateStoreAddressPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/types.NewAddressResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Create a new store address
      tags:
      - address
  /store/address/me/{storeId}:
    get:
      consumes:
      - application/json
      description: Returns all addresses belonging to the specified store owned by
        current user with optional filters
      parameters:
      - description: Store ID
        in: path
        name: storeId
        required: true
        type: integer
      - description: Filter by visibility status (public/private)
        in: query
        name: visibility
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.StoreAddress'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get current user's store addresses
      tags:
      - address
  /store/me:
    get:
      description: Returns all stores owned by the current user with optional name
        filtering
      parameters:
      - description: Filter stores by name (partial match)
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.Store'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get current user's stores
      tags:
      - store
  /store/me/{storeId}:
    get:
      description: Returns details for a specific store owned by the current user
      parameters:
      - description: Store ID
        in: path
        name: storeId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Store'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get current user's store details
      tags:
      - store
  /store/pages:
    get:
      description: Calculates the total number of pages available for stores listing
        based on filters and pagination settings
      parameters:
      - description: Filter stores by name (partial match)
        in: query
        name: name
        type: string
      - description: Filter stores by owner ID (requires permissions)
        in: query
        name: owner
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Returns total page count
          schema:
            $ref: '#/definitions/types.TotalPageCountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get total stores pages count
      tags:
      - store
  /store/phonenumber/{phoneId}:
    delete:
      consumes:
      - application/json
      description: Deletes an existing phone number belonging to the specified store.
        Requires permission to update stores.
      parameters:
      - description: Phone number ID
        in: path
        name: phoneId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Phone number deleted
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Delete a store phone number
      tags:
      - phone
    patch:
      consumes:
      - application/json
      description: Updates an existing phone number belonging to the specified store.
        Requires permission to update stores.
      parameters:
      - description: Phone number ID
        in: path
        name: phoneId
        required: true
        type: integer
      - description: Phone number update payload
        in: body
        name: phone
        required: true
        schema:
          $ref: '#/definitions/types.UpdateStorePhoneNumberPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Phone number updated
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Update a store phone number
      tags:
      - phone
  /store/phonenumber/{storeId}:
    get:
      consumes:
      - application/json
      description: Returns all phone numbers belonging to the specified store with
        optional filters. Response fields are filtered based on store privacy settings
        and requester's permissions.
      parameters:
      - description: Store ID
        in: path
        name: storeId
        required: true
        type: integer
      - description: Filter by visibility status (public/private)
        in: query
        name: visibility
        type: string
      - description: Filter by verification status (verified/unverified)
        in: query
        name: verified
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.StorePhoneNumber'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get store phone numbers
      tags:
      - phone
    post:
      consumes:
      - application/json
      description: Creates a new phone number for the specified store. Requires permission
        to update stores.
      parameters:
      - description: Store ID
        in: path
        name: storeId
        required: true
        type: integer
      - description: Phone number details
        in: body
        name: phone
        required: true
        schema:
          $ref: '#/definitions/types.CreateStorePhoneNumberPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/types.NewPhoneNumberResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Create a new store phone number
      tags:
      - phone
  /store/phonenumber/me/{storeId}:
    get:
      consumes:
      - application/json
      description: Returns all phone numbers belonging to the specified store owned
        by current user with optional filters
      parameters:
      - description: Store ID
        in: path
        name: storeId
        required: true
        type: integer
      - description: Filter by visibility status (public/private)
        in: query
        name: visibility
        type: string
      - description: Filter by verification status (verified/unverified)
        in: query
        name: verified
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.StorePhoneNumber'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get current user's store phone numbers
      tags:
      - phone
  /store/register:
    post:
      consumes:
      - application/json
      description: Creates a new store with the authenticated user as owner. Requires
        permission to add stores.
      parameters:
      - description: Store details
        in: body
        name: store
        required: true
        schema:
          $ref: '#/definitions/types.CreateStorePayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/types.NewStoreResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Register a new store
      tags:
      - store
  /store/settings/{storeId}:
    get:
      description: Returns the settings for a specific store. Response fields are
        filtered based on privacy settings.
      parameters:
      - description: Store ID
        in: path
        name: storeId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.StoreSettings'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get store settings
      tags:
      - settings
    patch:
      consumes:
      - application/json
      description: Updates privacy settings for a specific store. Requires permission
        to update stores.
      parameters:
      - description: Store ID
        in: path
        name: storeId
        required: true
        type: integer
      - description: Settings update payload
        in: body
        name: settings
        required: true
        schema:
          $ref: '#/definitions/types.UpdateStoreSettingsPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Store settings updated
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Update store settings
      tags:
      - settings
  /store/settings/me/{storeId}:
    get:
      description: Returns all settings for a store owned by the current user (includes
        private settings)
      parameters:
      - description: Store ID
        in: path
        name: storeId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.StoreSettings'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get current user's store settings
      tags:
      - settings
  /user:
    get:
      description: Retrieves a paginated list of users with optional filtering. The
        response fields are filtered based on user privacy settings and requester's
        permissions.
      parameters:
      - description: Filter users by full name (partial match)
        in: query
        name: name
        type: string
      - description: Filter users by role ID
        in: query
        name: role
        type: integer
      - description: 'Page number (default: 1)'
        in: query
        name: p
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of users with filtered fields
          schema:
            items:
              $ref: '#/definitions/types.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get users list
      tags:
      - user
    patch:
      consumes:
      - application/json
      description: Updates the authenticated user's profile information (username,
        full name, birth date)
      parameters:
      - description: Profile update payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/types.UpdateUserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated successfully
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Update user profile
      tags:
      - user
  /user/{userId}:
    get:
      description: Retrieves a single user's details by ID. The response fields are
        filtered based on user privacy settings and requester's permissions.
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User details with filtered fields
          schema:
            $ref: '#/definitions/types.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get user by ID
      tags:
      - user
  /user/address:
    get:
      consumes:
      - application/json
      description: Returns all addresses belonging to the current user with optional
        filters
      parameters:
      - description: Filter by visibility status (public/private)
        in: query
        name: visibility
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.UserAddress'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get current user's addresses
      tags:
      - address
    post:
      consumes:
      - application/json
      description: Creates a new address for the current user
      parameters:
      - description: Address details
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/types.CreateUserAddressPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/types.NewAddressResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Create a new address
      tags:
      - address
  /user/address/{addrId}:
    delete:
      consumes:
      - application/json
      description: Deletes an existing address belonging to the current user
      parameters:
      - description: Address ID
        in: path
        name: addrId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Address deleted
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Delete an address
      tags:
      - address
    patch:
      consumes:
      - application/json
      description: Updates an existing address belonging to the current user
      parameters:
      - description: Address ID
        in: path
        name: addrId
        required: true
        type: integer
      - description: Address update payload
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/types.UpdateUserAddressPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Address updated
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Update an address
      tags:
      - address
  /user/address/{userId}:
    get:
      consumes:
      - application/json
      description: Returns addresses belonging to a specific user. Visibility depends
        on requester's permissions.
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      - description: Filter by visibility status (public/private)
        in: query
        name: visibility
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of filtered address objects
          schema:
            items:
              $ref: '#/definitions/types.UserAddress'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get user's addresses
      tags:
      - address
  /user/ban/{userId}:
    patch:
      description: Bans a user account (requires permission to ban users). Cannot
        be used on admin/superadmin accounts.
      parameters:
      - description: User ID to ban
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User banned successfully
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Ban a user
      tags:
      - user
  /user/email:
    patch:
      consumes:
      - application/json
      description: Updates the authenticated user's email address and marks it as
        unverified
      parameters:
      - description: Email update payload (must include email field)
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/types.UpdateUserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Email updated successfully
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Update user email
      tags:
      - user
  /user/email/verify:
    patch:
      description: Completes the email verification process using a valid verification
        token
      parameters:
      - description: Email verification token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Email verified successfully
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      summary: Verify email
      tags:
      - authentication
    post:
      description: Sends a verification email to the authenticated user's email address
      produces:
      - application/json
      responses:
        "200":
          description: Verification email sent
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Request email verification
      tags:
      - authentication
  /user/forgotpass:
    patch:
      consumes:
      - application/json
      description: Completes the password reset process using a valid reset token
      parameters:
      - description: Password reset token
        in: query
        name: token
        required: true
        type: string
      - description: New password details
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/types.ResetPasswordPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successful
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      summary: Reset password
      tags:
      - authentication
    post:
      consumes:
      - application/json
      description: Initiates a password reset process by sending a reset link to the
        user's email
      parameters:
      - description: Email address for password reset
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/types.ForgotPasswordRequestPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset email sent if account exists
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      summary: Request password reset
      tags:
      - authentication
  /user/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns an access token. Also sets cookies
        for refresh and CSRF tokens.
      parameters:
      - description: User login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/types.LoginUserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Access token for authenticated session
          schema:
            $ref: '#/definitions/types.LoginResponsePayload'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      summary: Log in a user
      tags:
      - authentication
  /user/logout:
    post:
      consumes:
      - application/json
      description: Invalidates the current session by revoking refresh and CSRF tokens
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.LogoutResponsePayload'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Log out user
      tags:
      - authentication
  /user/me:
    get:
      consumes:
      - application/json
      description: Returns the profile information of the currently authenticated
        user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get current user profile
      tags:
      - user
  /user/pages:
    get:
      description: Calculates the total number of pages available for user listing
        based on filters and pagination settings
      parameters:
      - description: Filter users by full name (partial match)
        in: query
        name: name
        type: string
      - description: Filter users by role ID
        in: query
        name: role
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Returns total page count
          schema:
            $ref: '#/definitions/types.TotalPageCountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get total pages count
      tags:
      - user
  /user/password:
    patch:
      consumes:
      - application/json
      description: Updates the authenticated user's password after verifying current
        password
      parameters:
      - description: Password update payload (must include current and new password)
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/types.UpdateUserPasswordPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Password updated successfully
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Update user password
      tags:
      - user
  /user/phonenumber:
    get:
      consumes:
      - application/json
      description: Returns all phone numbers belonging to the current user with optional
        filters
      parameters:
      - description: Filter by visibility status (public/private)
        in: query
        name: visibility
        type: string
      - description: Filter by verification status (verified/unverified)
        in: query
        name: verified
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.UserPhoneNumber'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get current user's phone numbers
      tags:
      - phone
    post:
      consumes:
      - application/json
      description: Creates a new phone number for the current user
      parameters:
      - description: Phone number details
        in: body
        name: phone
        required: true
        schema:
          $ref: '#/definitions/types.CreateUserPhoneNumberPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/types.NewPhoneNumberResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Create a new phone number
      tags:
      - phone
  /user/phonenumber/{phoneId}:
    delete:
      consumes:
      - application/json
      description: Deletes an existing phone number belonging to the current user
      parameters:
      - description: Phone number ID
        in: path
        name: phoneId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Phone number deleted
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Delete a phone number
      tags:
      - phone
    patch:
      consumes:
      - application/json
      description: Updates an existing phone number belonging to the current user
      parameters:
      - description: Phone number ID
        in: path
        name: phoneId
        required: true
        type: integer
      - description: Phone number update payload
        in: body
        name: phone
        required: true
        schema:
          $ref: '#/definitions/types.UpdateUserPhoneNumberPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Phone number updated
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Update a phone number
      tags:
      - phone
  /user/phonenumber/{userId}:
    get:
      consumes:
      - application/json
      description: Returns phone numbers belonging to a specific user. Visibility
        depends on requester's permissions.
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      - description: Filter by visibility status (public/private)
        in: query
        name: visibility
        type: string
      - description: Filter by verification status (verified/unverified)
        in: query
        name: verified
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of filtered phone number objects
          schema:
            items:
              $ref: '#/definitions/types.UserPhoneNumber'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get user's phone numbers
      tags:
      - phone
  /user/refresh:
    post:
      description: Refreshes the access token using a valid refresh token from cookies.
      produces:
      - application/json
      responses:
        "200":
          description: New access token for authenticated session
          schema:
            $ref: '#/definitions/types.LoginResponsePayload'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      summary: Refresh access token
      tags:
      - authentication
  /user/register/customer:
    post:
      consumes:
      - application/json
      description: Registers a new user with the role of 'customer'
      parameters:
      - description: User registration payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.CreateUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User ID of the newly created account
          schema:
            $ref: '#/definitions/types.NewUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      summary: Register a new customer account
      tags:
      - registration
  /user/register/vendor:
    post:
      consumes:
      - application/json
      description: Registers a new user with the role of 'vendor'
      parameters:
      - description: User registration payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.CreateUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User ID of the newly created account
          schema:
            $ref: '#/definitions/types.NewUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      summary: Register a new vendor account
      tags:
      - registration
  /user/register/withrole/{roleName}:
    post:
      consumes:
      - application/json
      description: Registers a new user with a custom role. This route requires permission.
      parameters:
      - description: Role name to assign to the user
        in: path
        name: roleName
        required: true
        type: string
      - description: User registration payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.CreateUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User ID of the newly created account
          schema:
            $ref: '#/definitions/types.NewUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Register a user with a specific role
      tags:
      - registration
  /user/settings:
    patch:
      consumes:
      - application/json
      description: Updates the authenticated user's privacy and website settings
      parameters:
      - description: Settings update payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/types.UpdateUserSettingsPayload'
      produces:
      - application/json
      responses:
        "200":
          description: User settings updated
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Update user settings
      tags:
      - settings
  /user/settings/{userId}:
    get:
      description: Retrieves a user's settings (public fields only)
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User settings (filtered by public visibility)
          schema:
            $ref: '#/definitions/types.UserSettings'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get user settings
      tags:
      - settings
  /user/settings/me:
    get:
      description: Retrieves the authenticated user's complete settings (including
        private fields)
      produces:
      - application/json
      responses:
        "200":
          description: User's complete settings
          schema:
            $ref: '#/definitions/types.UserSettings'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get current user's settings
      tags:
      - settings
  /user/unban/{userId}:
    patch:
      description: Unbans a previously banned user account (requires permission to
        unban users)
      parameters:
      - description: User ID to unban
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User unbanned successfully
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Unban a user
      tags:
      - user
  /wallet/deposit:
    post:
      consumes:
      - application/json
      description: Creates a new deposit transaction for the current user's wallet
      parameters:
      - description: Deposit transaction details
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/types.CreateWalletTransactionPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/types.NewWalletTransactionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Create deposit transaction
      tags:
      - wallet
  /wallet/deposit/cancel/{txId}:
    patch:
      description: Marks a deposit transaction as failed/cancelled
      parameters:
      - description: Transaction ID
        in: path
        name: txId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Deposit transaction cancelled
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Cancel a deposit transaction
      tags:
      - wallet
  /wallet/deposit/complete/{txId}:
    patch:
      description: Marks a deposit transaction as completed (successful) after payment
        validation
      parameters:
      - description: Transaction ID
        in: path
        name: txId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Deposit transaction completed
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Complete a deposit transaction
      tags:
      - wallet
  /wallet/me:
    get:
      description: Retrieves the wallet information of the currently authenticated
        user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Wallet'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get current user's wallet
      tags:
      - wallet
  /wallet/me/transaction:
    get:
      description: Retrieves a paginated list of transactions for the current user's
        wallet with optional filtering
      parameters:
      - description: Filter by transaction type
        in: query
        name: typ
        type: string
      - description: Filter by transaction status
        in: query
        name: stat
        type: string
      - description: Filter transactions after this date (YYYY-MM-DD)
        in: query
        name: aftd
        type: string
      - description: Filter transactions before this date (YYYY-MM-DD)
        in: query
        name: befd
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: p
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.WalletTransaction'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get current user's transactions
      tags:
      - wallet
  /wallet/me/transaction/{txId}:
    get:
      description: Retrieves details of a specific transaction belonging to the current
        user
      parameters:
      - description: Transaction ID
        in: path
        name: txId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.WalletTransaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get a specific transaction
      tags:
      - wallet
  /wallet/me/transaction/pages:
    get:
      description: Returns the total number of pages available for the current user's
        transactions based on filters
      parameters:
      - description: Filter by transaction type
        in: query
        name: typ
        type: string
      - description: Filter by transaction status
        in: query
        name: stat
        type: string
      - description: Filter transactions after this date (YYYY-MM-DD)
        in: query
        name: aftd
        type: string
      - description: Filter transactions before this date (YYYY-MM-DD)
        in: query
        name: befd
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.TotalPageCountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get current user's transaction page count
      tags:
      - wallet
  /wallet/user/{userId}:
    get:
      description: Retrieves wallet information of a specific user (requires wallet
        transactions full access permission)
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Wallet'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get user's wallet (admin)
      tags:
      - wallet
  /wallet/user/{userId}/transaction:
    get:
      description: Retrieves a paginated list of transactions for a specific user's
        wallet (requires wallet transactions full access permission)
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      - description: Filter by transaction type
        in: query
        name: typ
        type: string
      - description: Filter by transaction status
        in: query
        name: stat
        type: string
      - description: Filter transactions after this date (YYYY-MM-DD)
        in: query
        name: aftd
        type: string
      - description: Filter transactions before this date (YYYY-MM-DD)
        in: query
        name: befd
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: p
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.WalletTransaction'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get user's transactions (admin)
      tags:
      - wallet
  /wallet/user/{userId}/transaction/{txId}:
    get:
      description: Retrieves details of a specific transaction belonging to a user
        (requires wallet transactions full access permission)
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      - description: Transaction ID
        in: path
        name: txId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.WalletTransaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get a specific user's transaction (admin)
      tags:
      - wallet
  /wallet/user/{userId}/transaction/pages:
    get:
      description: Returns the total number of pages available for a user's transactions
        based on filters (requires wallet transactions full access permission)
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      - description: Filter by transaction type
        in: query
        name: typ
        type: string
      - description: Filter by transaction status
        in: query
        name: stat
        type: string
      - description: Filter transactions after this date (YYYY-MM-DD)
        in: query
        name: aftd
        type: string
      - description: Filter transactions before this date (YYYY-MM-DD)
        in: query
        name: befd
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.TotalPageCountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get user's transaction page count (admin)
      tags:
      - wallet
  /wallet/withdraw:
    post:
      consumes:
      - application/json
      description: Creates a new withdraw transaction request for the current user's
        wallet
      parameters:
      - description: Withdraw transaction details
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/types.CreateWalletTransactionPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/types.NewWalletTransactionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Create withdraw transaction
      tags:
      - wallet
  /wallet/withdraw/cancel/{txId}:
    patch:
      description: Marks a withdraw transaction request as failed/cancelled
      parameters:
      - description: Transaction ID
        in: path
        name: txId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Withdraw transaction cancelled
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Cancel a withdraw transaction
      tags:
      - wallet
  /wallet/withdraw/complete/{txId}:
    patch:
      description: Marks a withdraw transaction request as completed (successful)
        after processing
      parameters:
      - description: Transaction ID
        in: path
        name: txId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Withdraw transaction completed
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/types.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Complete a withdraw transaction
      tags:
      - wallet
swagger: "2.0"
