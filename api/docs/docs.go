// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/order": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a paginated list of orders with optional filtering. Requires orders full access permission.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "order"
                ],
                "summary": "Get orders list",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Filter by user ID",
                        "name": "user",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by store ID",
                        "name": "store",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by payment status",
                        "name": "paystat",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by shipment status",
                        "name": "shipstat",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by created before date (RFC3339)",
                        "name": "calt",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by created after date (RFC3339)",
                        "name": "camt",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "p",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Order"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new order with the provided details. Requires create order permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "order"
                ],
                "summary": "Create a new order",
                "parameters": [
                    {
                        "description": "Order details",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateOrderPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.NewOrderResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/order/cancel/{orderId}": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Marks an order's payment as cancelled. Requires cancel order payment permission.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "order"
                ],
                "summary": "Cancel order payment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "orderId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order payment cancelled"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/order/complete/{orderId}": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Marks an order's payment as completed. Requires complete order payment permission.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "order"
                ],
                "summary": "Complete order payment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "orderId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order payment completed"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/order/me": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a paginated list of orders for the current user with optional filtering.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "order"
                ],
                "summary": "Get current user's orders",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Filter by store ID",
                        "name": "store",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by payment status",
                        "name": "paystat",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by shipment status",
                        "name": "shipstat",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by created before date (RFC3339)",
                        "name": "calt",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by created after date (RFC3339)",
                        "name": "camt",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "p",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Order"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/order/me/pages": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Calculates the total number of pages available for the current user's orders listing.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "order"
                ],
                "summary": "Get current user's orders pages count",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Filter by store ID",
                        "name": "store",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by payment status",
                        "name": "paystat",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by shipment status",
                        "name": "shipstat",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by created before date (RFC3339)",
                        "name": "calt",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by created after date (RFC3339)",
                        "name": "camt",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.TotalPageCountResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/order/me/{orderId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves full details for a specific order belonging to the current user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "order"
                ],
                "summary": "Get current user's order",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "orderId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Order"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/order/me/{orderId}/products": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves product variants for a specific order belonging to the current user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "order"
                ],
                "summary": "Get current user's order products",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "orderId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.OrderProductVariantInfo"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/order/pages": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Calculates the total number of pages available for orders listing based on filters. Requires orders full access permission.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "order"
                ],
                "summary": "Get total orders pages count",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Filter by user ID",
                        "name": "user",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by store ID",
                        "name": "store",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by payment status",
                        "name": "paystat",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by shipment status",
                        "name": "shipstat",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by created before date (RFC3339)",
                        "name": "calt",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by created after date (RFC3339)",
                        "name": "camt",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.TotalPageCountResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/order/shipment/{orderId}": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates shipment details for an order. Requires update order shipment permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "order"
                ],
                "summary": "Update order shipment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "orderId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Shipment details",
                        "name": "shipment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateOrderShipmentPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order shipment updated"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/order/store/me/{storeId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a paginated list of orders for the current user's store with optional filtering.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "order"
                ],
                "summary": "Get current user's store orders",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Store ID",
                        "name": "storeId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Filter by user ID",
                        "name": "user",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by payment status",
                        "name": "paystat",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by shipment status",
                        "name": "shipstat",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by created before date (RFC3339)",
                        "name": "calt",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by created after date (RFC3339)",
                        "name": "camt",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "p",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Order"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/order/store/me/{storeId}/pages": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Calculates the total number of pages available for the current user's store orders listing.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "order"
                ],
                "summary": "Get current user's store orders pages count",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Store ID",
                        "name": "storeId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Filter by user ID",
                        "name": "user",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by payment status",
                        "name": "paystat",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by shipment status",
                        "name": "shipstat",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by created before date (RFC3339)",
                        "name": "calt",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by created after date (RFC3339)",
                        "name": "camt",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.TotalPageCountResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/order/store/me/{storeId}/{orderId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves full details for a specific order belonging to the current user's store.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "order"
                ],
                "summary": "Get current user's store order",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Store ID",
                        "name": "storeId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "orderId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Order"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/order/store/me/{storeId}/{orderId}/products": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves product variants for a specific order belonging to the current user's store.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "order"
                ],
                "summary": "Get current user's store order products",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Store ID",
                        "name": "storeId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "orderId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.OrderProductVariantInfo"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/order/store/{storeId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a paginated list of orders for a specific store with optional filtering. Requires orders full access permission.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "order"
                ],
                "summary": "Get store's orders",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Store ID",
                        "name": "storeId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Filter by user ID",
                        "name": "user",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by payment status",
                        "name": "paystat",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by shipment status",
                        "name": "shipstat",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by created before date (RFC3339)",
                        "name": "calt",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by created after date (RFC3339)",
                        "name": "camt",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "p",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Order"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/order/store/{storeId}/pages": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Calculates the total number of pages available for a store's orders listing. Requires orders full access permission.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "order"
                ],
                "summary": "Get store's orders pages count",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Store ID",
                        "name": "storeId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Filter by user ID",
                        "name": "user",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by payment status",
                        "name": "paystat",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by shipment status",
                        "name": "shipstat",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by created before date (RFC3339)",
                        "name": "calt",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by created after date (RFC3339)",
                        "name": "camt",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.TotalPageCountResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/order/user/{userId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a paginated list of orders for a specific user with optional filtering. Requires orders full access permission.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "order"
                ],
                "summary": "Get user's orders",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Filter by store ID",
                        "name": "store",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by payment status",
                        "name": "paystat",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by shipment status",
                        "name": "shipstat",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by created before date (RFC3339)",
                        "name": "calt",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by created after date (RFC3339)",
                        "name": "camt",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "p",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Order"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/order/user/{userId}/pages": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Calculates the total number of pages available for a user's orders listing. Requires orders full access permission.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "order"
                ],
                "summary": "Get user's orders pages count",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Filter by store ID",
                        "name": "store",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by payment status",
                        "name": "paystat",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by shipment status",
                        "name": "shipstat",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by created before date (RFC3339)",
                        "name": "calt",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by created after date (RFC3339)",
                        "name": "camt",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.TotalPageCountResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/order/{orderId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves full details for a specific order. Requires orders full access permission.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "order"
                ],
                "summary": "Get order details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "orderId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Order"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Permanently deletes an order. Requires delete order permission.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "order"
                ],
                "summary": "Delete an order",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "orderId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/order/{orderId}/products": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves product variants for a specific order. Requires orders full access permission.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "order"
                ],
                "summary": "Get order products",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "orderId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.OrderProductVariantInfo"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/pgroup": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a list of permission groups with optional name filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "role and permission"
                ],
                "summary": "Get permission groups",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter permission groups by name",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.PermissionGroup"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new permission group",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "role and permission"
                ],
                "summary": "Create permission group",
                "parameters": [
                    {
                        "description": "Permission group details",
                        "name": "group",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreatePermissionGroupPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.NewPermissionGroupResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/pgroup/add/act": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Assigns action permissions to a permission group",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "role and permission"
                ],
                "summary": "Add action permissions to group",
                "parameters": [
                    {
                        "description": "Group ID and actions",
                        "name": "permissions",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.GroupActionPermissionAssignmentPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Action permission added to permission group"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/pgroup/add/rsrc": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Assigns resource permissions to a permission group",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "role and permission"
                ],
                "summary": "Add resource permissions to group",
                "parameters": [
                    {
                        "description": "Group ID and resources",
                        "name": "permissions",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.GroupResourcePermissionAssignmentPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Resource permission added to permission group"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/pgroup/byname/{pgroupName}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a specific permission group by its name including permissions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "role and permission"
                ],
                "summary": "Get permission group by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Permission group name",
                        "name": "pgroupName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.PermissionGroupWithPermissions"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/pgroup/full": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a list of permission groups with their associated permissions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "role and permission"
                ],
                "summary": "Get permission groups with permissions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter permission groups by name",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.PermissionGroupWithPermissions"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/pgroup/rmv/act": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Removes action permissions from a permission group",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "role and permission"
                ],
                "summary": "Remove action permissions from group",
                "parameters": [
                    {
                        "description": "Group ID and actions",
                        "name": "permissions",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.GroupActionPermissionAssignmentPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Action permission removed from permission group"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/pgroup/rmv/rsrc": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Removes resource permissions from a permission group",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "role and permission"
                ],
                "summary": "Remove resource permissions from group",
                "parameters": [
                    {
                        "description": "Group ID and resources",
                        "name": "permissions",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.GroupResourcePermissionAssignmentPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Resource permission removed from permission group"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/pgroup/{pgroupId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a specific permission group by its ID including permissions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "role and permission"
                ],
                "summary": "Get permission group by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Permission group ID",
                        "name": "pgroupId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.PermissionGroupWithPermissions"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes an existing permission group",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "role and permission"
                ],
                "summary": "Delete permission group",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Permission group ID",
                        "name": "pgroupId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Permission group deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates an existing permission group",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "role and permission"
                ],
                "summary": "Update permission group",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Permission group ID",
                        "name": "pgroupId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Permission group details",
                        "name": "group",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdatePermissionGroupPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Permission group updated"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/product": {
            "get": {
                "description": "Retrieves a paginated list of products with optional filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Get products",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search keyword",
                        "name": "k",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Minimum quantity filter",
                        "name": "minq",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter products with offers",
                        "name": "offr",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by category ID",
                        "name": "cat",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by tag ID",
                        "name": "tag",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter products with price more than value",
                        "name": "pmt",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter products with price less than value",
                        "name": "plt",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by store ID",
                        "name": "store",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "p",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Product"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new product with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Create a product",
                "parameters": [
                    {
                        "description": "Product details",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateProductPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.NewProductResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/product/active/{productId}": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Sets a product's active status to true",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Activate a product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "productId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product activated successfully"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/product/attribute": {
            "get": {
                "description": "Retrieves a paginated list of product attributes with optional filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Get product attributes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by attribute label",
                        "name": "label",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "p",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.ProductAttributeWithOptions"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new product attribute with options",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Create a product attribute",
                "parameters": [
                    {
                        "description": "Attribute details",
                        "name": "attribute",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateProductAttributePayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.NewProductAttributeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/product/attribute/pages": {
            "get": {
                "description": "Returns the total number of pages available for product attributes based on filters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Get product attributes page count",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by attribute label",
                        "name": "label",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.TotalPageCountResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/product/attribute/{attributeId}": {
            "get": {
                "description": "Retrieves details of a specific product attribute by ID including options",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Get a product attribute",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Attribute ID",
                        "name": "attributeId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.ProductAttributeWithOptions"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Permanently deletes a product attribute",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Delete a product attribute",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Attribute ID",
                        "name": "attributeId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product attribute deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates an existing product attribute",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Update a product attribute",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Attribute ID",
                        "name": "attributeId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Attribute update details",
                        "name": "attribute",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateProductAttributePayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product attribute updated"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/product/category": {
            "get": {
                "description": "Retrieves a paginated list of product categories with optional filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Get product categories",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by category name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by parent category ID",
                        "name": "parent",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "p",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.ProductCategory"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new product category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Create a product category",
                "parameters": [
                    {
                        "description": "Category details",
                        "name": "category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateProductCategoryPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.NewProductCategoryResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/product/category/full": {
            "get": {
                "description": "Retrieves a paginated list of product categories including parent category information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Get product categories with parent info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by category name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by parent category ID",
                        "name": "parent",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "p",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.ProductCategoryWithParents"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/product/category/image": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Uploads an image for a product category (requires authentication and permissions). Max size 3MB, allowed types: jpeg, png, jpg, webp.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Upload product category image",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Category image file",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.FileUploadResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/product/category/image/{filename}": {
            "get": {
                "description": "Retrieves a product category image file by filename. Supported formats: jpeg, png, jpg, webp.",
                "produces": [
                    "image/jpeg",
                    "image/png",
                    "image/jpg",
                    "image/webp"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Get product category image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Image filename",
                        "name": "filename",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image file",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Invalid filename",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "File not found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/product/category/pages": {
            "get": {
                "description": "Returns the total number of pages available for product categories based on filters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Get product category page count",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by category name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by parent category ID",
                        "name": "parent",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.TotalPageCountResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/product/category/{categoryId}": {
            "get": {
                "description": "Retrieves details of a specific product category by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Get a product category",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "categoryId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.ProductCategory"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Permanently deletes a product category",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Delete a product category",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "categoryId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product category deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates an existing product category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Update a product category",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "categoryId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Category update details",
                        "name": "category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateProductCategoryPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product category updated"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/product/comment/me/{commentId}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes a comment made by the current user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Delete my comment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Comment ID",
                        "name": "commentId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product comment deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates a comment made by the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Edit my comment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Comment ID",
                        "name": "commentId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated comment details",
                        "name": "comment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateProductCommentPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product comment ddited"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/product/comment/product/{productId}": {
            "get": {
                "description": "Retrieves a paginated list of comments for a specific product with optional filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Get product comments",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "productId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Filter comments with score less than value",
                        "name": "slt",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter comments with score more than value",
                        "name": "smt",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "p",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.ProductComment"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/product/comment/product/{productId}/pages": {
            "get": {
                "description": "Returns the total number of pages available for product comments based on filters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Get product comments page count",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "productId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Filter comments with score less than value",
                        "name": "slt",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter comments with score more than value",
                        "name": "smt",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.TotalPageCountResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/product/comment/{commentId}": {
            "get": {
                "description": "Retrieves details of a specific product comment by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Get a product comment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Comment ID",
                        "name": "commentId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.ProductComment"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes any product comment (requires admin permissions)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Delete a product comment (admin)",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Comment ID",
                        "name": "commentId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product comment deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/product/comment/{productId}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new comment on a product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Create a product comment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "productId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Comment details",
                        "name": "comment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateProductCommentPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.NewProductCommentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/product/deactive/{productId}": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Sets a product's active status to false",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Deactivate a product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "productId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product deactivated successfully"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/product/image": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Uploads an image for a product (requires authentication and permissions). Max size 3MB, allowed types: jpeg, png, jpg, webp.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Upload product image",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Product image file",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.FileUploadResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/product/image/{filename}": {
            "get": {
                "description": "Retrieves a product image file by filename. Supported formats: jpeg, png, jpg, webp.",
                "produces": [
                    "image/jpeg",
                    "image/png",
                    "image/jpg",
                    "image/webp"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Get product image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Image filename",
                        "name": "filename",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image file",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Invalid filename",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "File not found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/product/offer": {
            "get": {
                "description": "Retrieves a paginated list of product offers with optional filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Get product offers",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Filter offers with discount less than value",
                        "name": "dlt",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter offers with discount more than value",
                        "name": "dmt",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter offers expiring before timestamp",
                        "name": "exalt",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter offers expiring after timestamp",
                        "name": "examt",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "p",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.ProductOffer"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/product/offer/byproduct/{productId}": {
            "get": {
                "description": "Retrieves the offer for a specific product by product ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Get product offer by product ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "productId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.ProductOffer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/product/offer/pages": {
            "get": {
                "description": "Returns the total number of pages available for product offers based on filters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Get product offers page count",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Filter offers with discount less than value",
                        "name": "dlt",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter offers with discount more than value",
                        "name": "dmt",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter offers expiring before timestamp",
                        "name": "exalt",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter offers expiring after timestamp",
                        "name": "examt",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.TotalPageCountResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/product/offer/{offerId}": {
            "get": {
                "description": "Retrieves details of a specific product offer by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Get a product offer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Offer ID",
                        "name": "offerId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.ProductOffer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Permanently deletes a product offer",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Delete a product offer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Offer ID",
                        "name": "offerId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product offer deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates an existing product offer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Update a product offer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Offer ID",
                        "name": "offerId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Offer update details",
                        "name": "offer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateProductOfferPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product offer updated"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/product/offer/{productId}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new offer for a product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Create a product offer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "productId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Offer details",
                        "name": "offer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateProductOfferPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.NewProductOfferResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/product/pages": {
            "get": {
                "description": "Returns the total number of pages available for products based on filters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Get product page count",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search keyword",
                        "name": "k",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Minimum quantity filter",
                        "name": "minq",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter products with offers",
                        "name": "offr",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by category ID",
                        "name": "cat",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by tag ID",
                        "name": "tag",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter products with price more than value",
                        "name": "pmt",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter products with price less than value",
                        "name": "plt",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by store ID",
                        "name": "store",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.TotalPageCountResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/product/tag": {
            "get": {
                "description": "Retrieves a paginated list of product tags with optional filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Get product tags",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by tag name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by product ID",
                        "name": "product",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "p",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.ProductTag"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new product tag",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Create a product tag",
                "parameters": [
                    {
                        "description": "Tag details",
                        "name": "tag",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateProductTagPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.NewProductTagResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/product/tag/pages": {
            "get": {
                "description": "Returns the total number of pages available for product tags based on filters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Get product tags page count",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by tag name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by product ID",
                        "name": "product",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.TotalPageCountResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/product/tag/{tagId}": {
            "get": {
                "description": "Retrieves details of a specific product tag by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Get a product tag",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Tag ID",
                        "name": "tagId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.ProductTag"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Permanently deletes a product tag",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Delete a product tag",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Tag ID",
                        "name": "tagId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product tag deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates an existing product tag",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Update a product tag",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Tag ID",
                        "name": "tagId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Tag update details",
                        "name": "tag",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateProductTagPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product tag updated"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/product/{productId}": {
            "get": {
                "description": "Retrieves details of a specific product by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Get a product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "productId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Product"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Permanently deletes a product",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Delete a product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "productId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product deleted successfully"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates an existing product with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Update a product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "productId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Product update details",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateProductPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product updated successfully"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/product/{productId}/extended": {
            "get": {
                "description": "Retrieves extended details of a specific product by ID including additional information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Get extended product details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "productId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.ProductExtended"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/product/{productId}/inventory": {
            "get": {
                "description": "Retrieves inventory information for a specific product by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Get product inventory",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "productId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns object with total and inStock counts",
                        "schema": {
                            "$ref": "#/definitions/types.ProductInventoryResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/role": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a list of roles with optional name filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "role and permission"
                ],
                "summary": "Get roles",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter roles by name",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Role"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "role and permission"
                ],
                "summary": "Create role",
                "parameters": [
                    {
                        "description": "Role details",
                        "name": "role",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateRolePayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.NewRoleResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/role/addpg": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Assigns permission groups to a role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "role and permission"
                ],
                "summary": "Add permission groups to role",
                "parameters": [
                    {
                        "description": "Role and group IDs",
                        "name": "assignment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.RoleGroupAssignmentPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Permission group added to role"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/role/byname/{roleName}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a specific role by its name including permission groups",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "role and permission"
                ],
                "summary": "Get role by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role name",
                        "name": "roleName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.RoleWithPermissionGroups"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/role/full": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a list of roles with their associated permission groups",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "role and permission"
                ],
                "summary": "Get roles with permission groups",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter roles by name",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.RoleWithPermissionGroups"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/role/rmvpg": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Removes permission groups from a role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "role and permission"
                ],
                "summary": "Remove permission groups from role",
                "parameters": [
                    {
                        "description": "Role and group IDs",
                        "name": "assignment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.RoleGroupAssignmentPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Permission group removed from role"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/role/{roleId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a specific role by its ID including permission groups",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "role and permission"
                ],
                "summary": "Get role by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Role ID",
                        "name": "roleId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.RoleWithPermissionGroups"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes an existing role",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "role and permission"
                ],
                "summary": "Delete role",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Role ID",
                        "name": "roleId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates an existing role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "role and permission"
                ],
                "summary": "Update role",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Role ID",
                        "name": "roleId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Role details",
                        "name": "role",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateRolePayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role updated"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/store": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a paginated list of stores with optional filtering. The response fields are filtered based on store privacy settings and requester's permissions.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "store"
                ],
                "summary": "Get stores list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter stores by name (partial match)",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter stores by owner ID (requires permissions)",
                        "name": "owner",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "p",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of stores with filtered fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Store"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/store/address/me/{storeId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns all addresses belonging to the specified store owned by current user with optional filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "address"
                ],
                "summary": "Get current user's store addresses",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Store ID",
                        "name": "storeId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter by visibility status (public/private)",
                        "name": "visibility",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.StoreAddress"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/store/address/{addrId}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes an existing address belonging to the specified store. Requires permission to update stores.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "address"
                ],
                "summary": "Delete a store address",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Address ID",
                        "name": "addrId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Address deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates an existing address belonging to the specified store. Requires permission to update stores.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "address"
                ],
                "summary": "Update a store address",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Address ID",
                        "name": "addrId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Address update payload",
                        "name": "address",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateStoreAddressPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Address updated"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/store/address/{storeId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns all addresses belonging to the specified store with optional filters. Response fields are filtered based on store privacy settings and requester's permissions.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "address"
                ],
                "summary": "Get store addresses",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Store ID",
                        "name": "storeId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter by visibility status (public/private)",
                        "name": "visibility",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.StoreAddress"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new address for the specified store. Requires permission to update stores.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "address"
                ],
                "summary": "Create a new store address",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Store ID",
                        "name": "storeId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Address details",
                        "name": "address",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateStoreAddressPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.NewAddressResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/store/me": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns all stores owned by the current user with optional name filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "store"
                ],
                "summary": "Get current user's stores",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter stores by name (partial match)",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Store"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/store/me/{storeId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns details for a specific store owned by the current user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "store"
                ],
                "summary": "Get current user's store details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Store ID",
                        "name": "storeId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Store"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/store/pages": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Calculates the total number of pages available for stores listing based on filters and pagination settings",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "store"
                ],
                "summary": "Get total stores pages count",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter stores by name (partial match)",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter stores by owner ID (requires permissions)",
                        "name": "owner",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns total page count",
                        "schema": {
                            "$ref": "#/definitions/types.TotalPageCountResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/store/phonenumber/me/{storeId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns all phone numbers belonging to the specified store owned by current user with optional filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "phone"
                ],
                "summary": "Get current user's store phone numbers",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Store ID",
                        "name": "storeId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter by visibility status (public/private)",
                        "name": "visibility",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by verification status (verified/unverified)",
                        "name": "verified",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.StorePhoneNumber"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/store/phonenumber/{phoneId}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes an existing phone number belonging to the specified store. Requires permission to update stores.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "phone"
                ],
                "summary": "Delete a store phone number",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Phone number ID",
                        "name": "phoneId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Phone number deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates an existing phone number belonging to the specified store. Requires permission to update stores.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "phone"
                ],
                "summary": "Update a store phone number",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Phone number ID",
                        "name": "phoneId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Phone number update payload",
                        "name": "phone",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateStorePhoneNumberPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Phone number updated"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/store/phonenumber/{storeId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns all phone numbers belonging to the specified store with optional filters. Response fields are filtered based on store privacy settings and requester's permissions.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "phone"
                ],
                "summary": "Get store phone numbers",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Store ID",
                        "name": "storeId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter by visibility status (public/private)",
                        "name": "visibility",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by verification status (verified/unverified)",
                        "name": "verified",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.StorePhoneNumber"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new phone number for the specified store. Requires permission to update stores.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "phone"
                ],
                "summary": "Create a new store phone number",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Store ID",
                        "name": "storeId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Phone number details",
                        "name": "phone",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateStorePhoneNumberPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.NewPhoneNumberResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/store/register": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new store with the authenticated user as owner. Requires permission to add stores.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "store"
                ],
                "summary": "Register a new store",
                "parameters": [
                    {
                        "description": "Store details",
                        "name": "store",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateStorePayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.NewStoreResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/store/settings/me/{storeId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns all settings for a store owned by the current user (includes private settings)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settings"
                ],
                "summary": "Get current user's store settings",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Store ID",
                        "name": "storeId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.StoreSettings"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/store/settings/{storeId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the settings for a specific store. Response fields are filtered based on privacy settings.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settings"
                ],
                "summary": "Get store settings",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Store ID",
                        "name": "storeId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.StoreSettings"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates privacy settings for a specific store. Requires permission to update stores.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settings"
                ],
                "summary": "Update store settings",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Store ID",
                        "name": "storeId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Settings update payload",
                        "name": "settings",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateStoreSettingsPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Store settings updated"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/store/{storeId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns details for a specific store. The response fields are filtered based on store privacy settings and requester's permissions.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "store"
                ],
                "summary": "Get store details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Store ID",
                        "name": "storeId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Store"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Permanently deletes a store and all its associated data. Requires permission to delete stores.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "store"
                ],
                "summary": "Delete a store",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Store ID",
                        "name": "storeId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Store deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates details for a specific store. Requires permission to update stores.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "store"
                ],
                "summary": "Update store details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Store ID",
                        "name": "storeId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Store update payload",
                        "name": "store",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateStorePayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Store updated"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a paginated list of users with optional filtering. The response fields are filtered based on user privacy settings and requester's permissions.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get users list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter users by full name (partial match)",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter users by role ID",
                        "name": "role",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "p",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users with filtered fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.User"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates the authenticated user's profile information (username, full name, birth date)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update user profile",
                "parameters": [
                    {
                        "description": "Profile update payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateUserPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile updated successfully"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/user/address": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns all addresses belonging to the current user with optional filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "address"
                ],
                "summary": "Get current user's addresses",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by visibility status (public/private)",
                        "name": "visibility",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.UserAddress"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new address for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "address"
                ],
                "summary": "Create a new address",
                "parameters": [
                    {
                        "description": "Address details",
                        "name": "address",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateUserAddressPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.NewAddressResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/user/address/{addrId}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes an existing address belonging to the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "address"
                ],
                "summary": "Delete an address",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Address ID",
                        "name": "addrId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Address deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates an existing address belonging to the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "address"
                ],
                "summary": "Update an address",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Address ID",
                        "name": "addrId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Address update payload",
                        "name": "address",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateUserAddressPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Address updated"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/user/address/{userId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns addresses belonging to a specific user. Visibility depends on requester's permissions.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "address"
                ],
                "summary": "Get user's addresses",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter by visibility status (public/private)",
                        "name": "visibility",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of filtered address objects",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.UserAddress"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/user/ban/{userId}": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Bans a user account (requires permission to ban users). Cannot be used on admin/superadmin accounts.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Ban a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID to ban",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User banned successfully"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/user/email": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates the authenticated user's email address and marks it as unverified",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update user email",
                "parameters": [
                    {
                        "description": "Email update payload (must include email field)",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateUserPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email updated successfully"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/user/email/verify": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Sends a verification email to the authenticated user's email address",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Request email verification",
                "responses": {
                    "200": {
                        "description": "Verification email sent"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Completes the email verification process using a valid verification token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Verify email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Email verification token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email verified successfully"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/user/forgotpass": {
            "post": {
                "description": "Initiates a password reset process by sending a reset link to the user's email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Request password reset",
                "parameters": [
                    {
                        "description": "Email address for password reset",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.ForgotPasswordRequestPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset email sent if account exists"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Completes the password reset process using a valid reset token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Reset password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Password reset token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "New password details",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.ResetPasswordPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset successful"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "Authenticates a user and returns an access token. Also sets cookies for refresh and CSRF tokens.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Log in a user",
                "parameters": [
                    {
                        "description": "User login credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.LoginUserPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Access token for authenticated session",
                        "schema": {
                            "$ref": "#/definitions/types.LoginResponsePayload"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/user/logout": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Invalidates the current session by revoking refresh and CSRF tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Log out user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.LogoutResponsePayload"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/user/me": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the profile information of the currently authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get current user profile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/user/pages": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Calculates the total number of pages available for user listing based on filters and pagination settings",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get total pages count",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter users by full name (partial match)",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter users by role ID",
                        "name": "role",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns total page count",
                        "schema": {
                            "$ref": "#/definitions/types.TotalPageCountResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/user/password": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates the authenticated user's password after verifying current password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update user password",
                "parameters": [
                    {
                        "description": "Password update payload (must include current and new password)",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateUserPasswordPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password updated successfully"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/user/phonenumber": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns all phone numbers belonging to the current user with optional filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "phone"
                ],
                "summary": "Get current user's phone numbers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by visibility status (public/private)",
                        "name": "visibility",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by verification status (verified/unverified)",
                        "name": "verified",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.UserPhoneNumber"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new phone number for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "phone"
                ],
                "summary": "Create a new phone number",
                "parameters": [
                    {
                        "description": "Phone number details",
                        "name": "phone",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateUserPhoneNumberPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.NewPhoneNumberResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/user/phonenumber/{phoneId}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes an existing phone number belonging to the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "phone"
                ],
                "summary": "Delete a phone number",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Phone number ID",
                        "name": "phoneId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Phone number deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates an existing phone number belonging to the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "phone"
                ],
                "summary": "Update a phone number",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Phone number ID",
                        "name": "phoneId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Phone number update payload",
                        "name": "phone",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateUserPhoneNumberPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Phone number updated"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/user/phonenumber/{userId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns phone numbers belonging to a specific user. Visibility depends on requester's permissions.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "phone"
                ],
                "summary": "Get user's phone numbers",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter by visibility status (public/private)",
                        "name": "visibility",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by verification status (verified/unverified)",
                        "name": "verified",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of filtered phone number objects",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.UserPhoneNumber"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/user/refresh": {
            "post": {
                "description": "Refreshes the access token using a valid refresh token from cookies.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Refresh access token",
                "responses": {
                    "200": {
                        "description": "New access token for authenticated session",
                        "schema": {
                            "$ref": "#/definitions/types.LoginResponsePayload"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/user/register/customer": {
            "post": {
                "description": "Registers a new user with the role of 'customer'",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registration"
                ],
                "summary": "Register a new customer account",
                "parameters": [
                    {
                        "description": "User registration payload",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateUserPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User ID of the newly created account",
                        "schema": {
                            "$ref": "#/definitions/types.NewUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/user/register/vendor": {
            "post": {
                "description": "Registers a new user with the role of 'vendor'",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registration"
                ],
                "summary": "Register a new vendor account",
                "parameters": [
                    {
                        "description": "User registration payload",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateUserPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User ID of the newly created account",
                        "schema": {
                            "$ref": "#/definitions/types.NewUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/user/register/withrole/{roleName}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Registers a new user with a custom role. This route requires permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registration"
                ],
                "summary": "Register a user with a specific role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role name to assign to the user",
                        "name": "roleName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User registration payload",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateUserPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User ID of the newly created account",
                        "schema": {
                            "$ref": "#/definitions/types.NewUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/user/settings": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates the authenticated user's privacy and website settings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settings"
                ],
                "summary": "Update user settings",
                "parameters": [
                    {
                        "description": "Settings update payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateUserSettingsPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User settings updated"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/user/settings/me": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves the authenticated user's complete settings (including private fields)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settings"
                ],
                "summary": "Get current user's settings",
                "responses": {
                    "200": {
                        "description": "User's complete settings",
                        "schema": {
                            "$ref": "#/definitions/types.UserSettings"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/user/settings/{userId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a user's settings (public fields only)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "settings"
                ],
                "summary": "Get user settings",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User settings (filtered by public visibility)",
                        "schema": {
                            "$ref": "#/definitions/types.UserSettings"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/user/unban/{userId}": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Unbans a previously banned user account (requires permission to unban users)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Unban a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID to unban",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User unbanned successfully"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/user/{userId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a single user's details by ID. The response fields are filtered based on user privacy settings and requester's permissions.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details with filtered fields",
                        "schema": {
                            "$ref": "#/definitions/types.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/wallet/deposit": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new deposit transaction for the current user's wallet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet"
                ],
                "summary": "Create deposit transaction",
                "parameters": [
                    {
                        "description": "Deposit transaction details",
                        "name": "transaction",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateWalletTransactionPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.NewWalletTransactionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/wallet/deposit/cancel/{txId}": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Marks a deposit transaction as failed/cancelled",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet"
                ],
                "summary": "Cancel a deposit transaction",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Transaction ID",
                        "name": "txId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deposit transaction cancelled"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/wallet/deposit/complete/{txId}": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Marks a deposit transaction as completed (successful) after payment validation",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet"
                ],
                "summary": "Complete a deposit transaction",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Transaction ID",
                        "name": "txId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deposit transaction completed"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/wallet/me": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves the wallet information of the currently authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet"
                ],
                "summary": "Get current user's wallet",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Wallet"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/wallet/me/transaction": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a paginated list of transactions for the current user's wallet with optional filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet"
                ],
                "summary": "Get current user's transactions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by transaction type",
                        "name": "typ",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by transaction status",
                        "name": "stat",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter transactions after this date (YYYY-MM-DD)",
                        "name": "aftd",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter transactions before this date (YYYY-MM-DD)",
                        "name": "befd",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "p",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.WalletTransaction"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/wallet/me/transaction/pages": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the total number of pages available for the current user's transactions based on filters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet"
                ],
                "summary": "Get current user's transaction page count",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by transaction type",
                        "name": "typ",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by transaction status",
                        "name": "stat",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter transactions after this date (YYYY-MM-DD)",
                        "name": "aftd",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter transactions before this date (YYYY-MM-DD)",
                        "name": "befd",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.TotalPageCountResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/wallet/me/transaction/{txId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves details of a specific transaction belonging to the current user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet"
                ],
                "summary": "Get a specific transaction",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Transaction ID",
                        "name": "txId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.WalletTransaction"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/wallet/user/{userId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves wallet information of a specific user (requires wallet transactions full access permission)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet"
                ],
                "summary": "Get user's wallet (admin)",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Wallet"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/wallet/user/{userId}/transaction": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a paginated list of transactions for a specific user's wallet (requires wallet transactions full access permission)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet"
                ],
                "summary": "Get user's transactions (admin)",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter by transaction type",
                        "name": "typ",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by transaction status",
                        "name": "stat",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter transactions after this date (YYYY-MM-DD)",
                        "name": "aftd",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter transactions before this date (YYYY-MM-DD)",
                        "name": "befd",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "p",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.WalletTransaction"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/wallet/user/{userId}/transaction/pages": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the total number of pages available for a user's transactions based on filters (requires wallet transactions full access permission)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet"
                ],
                "summary": "Get user's transaction page count (admin)",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter by transaction type",
                        "name": "typ",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by transaction status",
                        "name": "stat",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter transactions after this date (YYYY-MM-DD)",
                        "name": "aftd",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter transactions before this date (YYYY-MM-DD)",
                        "name": "befd",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.TotalPageCountResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/wallet/user/{userId}/transaction/{txId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves details of a specific transaction belonging to a user (requires wallet transactions full access permission)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet"
                ],
                "summary": "Get a specific user's transaction (admin)",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Transaction ID",
                        "name": "txId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.WalletTransaction"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/wallet/withdraw": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new withdraw transaction request for the current user's wallet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet"
                ],
                "summary": "Create withdraw transaction",
                "parameters": [
                    {
                        "description": "Withdraw transaction details",
                        "name": "transaction",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateWalletTransactionPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.NewWalletTransactionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/wallet/withdraw/cancel/{txId}": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Marks a withdraw transaction request as failed/cancelled",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet"
                ],
                "summary": "Cancel a withdraw transaction",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Transaction ID",
                        "name": "txId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Withdraw transaction cancelled"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        },
        "/wallet/withdraw/complete/{txId}": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Marks a withdraw transaction request as completed (successful) after processing",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet"
                ],
                "summary": "Complete a withdraw transaction",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Transaction ID",
                        "name": "txId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Withdraw transaction completed"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "types.Action": {
            "type": "string",
            "enum": [
                "full_control",
                "can_ban_user",
                "can_unban_user",
                "can_add_store",
                "can_update_store",
                "can_delete_store",
                "can_create_order",
                "can_delete_order",
                "can_update_order_shipment",
                "can_complete_order_payment",
                "can_cancel_order_payment",
                "can_add_role",
                "can_update_role",
                "can_delete_role",
                "can_add_user_with_role",
                "can_add_permission_group",
                "can_delete_permission_group",
                "can_update_permission_group",
                "can_assign_permission_group_to_role",
                "can_remove_permission_group_from_role",
                "can_assign_permission_to_group",
                "can_remove_permission_from_group",
                "can_add_product_category",
                "can_update_product_category",
                "can_delete_product_category",
                "can_add_product",
                "can_update_product",
                "can_delete_product",
                "can_add_product_tag",
                "can_update_product_tag",
                "can_delete_product_tag",
                "can_add_product_offer",
                "can_update_product_offer",
                "can_delete_product_offer",
                "can_add_product_attribute",
                "can_update_product_attribute",
                "can_delete_product_attribute",
                "can_delete_product_comment",
                "can_approve_withdraw_transaction",
                "can_cancel_withdraw_transaction"
            ],
            "x-enum-varnames": [
                "ActionFullControl",
                "ActionCanBanUser",
                "ActionCanUnbanUser",
                "ActionCanAddStore",
                "ActionCanUpdateStore",
                "ActionCanDeleteStore",
                "ActionCanCreateOrder",
                "ActionCanDeleteOrder",
                "ActionCanUpdateOrderShipment",
                "ActionCanCompleteOrderPayment",
                "ActionCanCancelOrderPayment",
                "ActionCanAddRole",
                "ActionCanUpdateRole",
                "ActionCanDeleteRole",
                "ActionCanAddUserWithRole",
                "ActionCanAddPermissionGroup",
                "ActionCanDeletePermissionGroup",
                "ActionCanUpdatePermissionGroup",
                "ActionCanAssignPermissionGroupToRole",
                "ActionCanRemovePermissionGroupFromRole",
                "ActionCanAssignPermissionToGroup",
                "ActionCanRemovePermissionFromGroup",
                "ActionCanAddProductCategory",
                "ActionCanUpdateProductCategory",
                "ActionCanDeleteProductCategory",
                "ActionCanAddProduct",
                "ActionCanUpdateProduct",
                "ActionCanDeleteProduct",
                "ActionCanAddProductTag",
                "ActionCanUpdateProductTag",
                "ActionCanDeleteProductTag",
                "ActionCanAddProductOffer",
                "ActionCanUpdateProductOffer",
                "ActionCanDeleteProductOffer",
                "ActionCanAddProductAttribute",
                "ActionCanUpdateProductAttribute",
                "ActionCanDeleteProductAttribute",
                "ActionCanDeleteProductComment",
                "ActionCanApproveWithdrawTransaction",
                "ActionCanCancelWithdrawTransaction"
            ]
        },
        "types.CreateOrderPayload": {
            "type": "object",
            "required": [
                "arrivalDate",
                "productVariants",
                "receiverAddressId"
            ],
            "properties": {
                "arrivalDate": {
                    "description": "Expected arrival date for the order (required)",
                    "type": "string"
                },
                "productVariants": {
                    "description": "List of product variants to order (required)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.OrderProductVariantAssignmentPayload"
                    }
                },
                "receiverAddressId": {
                    "description": "ID of the receiver's address (required)",
                    "type": "integer"
                },
                "userId": {
                    "description": "ID of the user placing the order",
                    "type": "integer"
                }
            }
        },
        "types.CreatePermissionGroupPayload": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "description": "Description of the permission group",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the permission group (required, 1+ characters)",
                    "type": "string"
                }
            }
        },
        "types.CreateProductAttributePayload": {
            "type": "object",
            "required": [
                "label",
                "options"
            ],
            "properties": {
                "label": {
                    "description": "Attribute name/label (required)",
                    "type": "string"
                },
                "options": {
                    "description": "List of option values (required)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "types.CreateProductBasePayload": {
            "type": "object",
            "required": [
                "name",
                "price",
                "shipmentFactor",
                "storeId",
                "subcategoryId"
            ],
            "properties": {
                "description": {
                    "description": "Product description",
                    "type": "string"
                },
                "name": {
                    "description": "Product name (required)",
                    "type": "string"
                },
                "price": {
                    "description": "Product price (required)",
                    "type": "number"
                },
                "shipmentFactor": {
                    "description": "Shipping cost factor (required)",
                    "type": "number"
                },
                "slug": {
                    "description": "URL-friendly slug",
                    "type": "string"
                },
                "storeId": {
                    "description": "Store ID (required)",
                    "type": "integer"
                },
                "subcategoryId": {
                    "description": "Subcategory ID (required)",
                    "type": "integer"
                }
            }
        },
        "types.CreateProductCategoryPayload": {
            "type": "object",
            "required": [
                "imageName",
                "name"
            ],
            "properties": {
                "imageName": {
                    "description": "Image filename (required)",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the category (required)",
                    "type": "string"
                },
                "parentCategoryId": {
                    "description": "ID of the parent category, if any",
                    "type": "integer"
                }
            }
        },
        "types.CreateProductCommentPayload": {
            "type": "object",
            "required": [
                "comment",
                "scoring"
            ],
            "properties": {
                "comment": {
                    "description": "Comment text (required)",
                    "type": "string"
                },
                "productId": {
                    "description": "Product ID being commented on",
                    "type": "integer"
                },
                "scoring": {
                    "description": "Rating score (1-5) (required)",
                    "type": "integer"
                },
                "userId": {
                    "description": "User ID making the comment",
                    "type": "integer"
                }
            }
        },
        "types.CreateProductImagePayload": {
            "type": "object",
            "required": [
                "imageName",
                "isMain"
            ],
            "properties": {
                "imageName": {
                    "description": "Image filename (required)",
                    "type": "string"
                },
                "isMain": {
                    "description": "Whether this is the main product image (required)",
                    "type": "boolean"
                }
            }
        },
        "types.CreateProductOfferPayload": {
            "type": "object",
            "required": [
                "discount",
                "expireAt"
            ],
            "properties": {
                "discount": {
                    "description": "Discount percentage (required)",
                    "type": "number"
                },
                "expireAt": {
                    "description": "Expiration date (required)",
                    "type": "string"
                },
                "productId": {
                    "description": "Product ID this offer applies to",
                    "type": "integer"
                }
            }
        },
        "types.CreateProductPayload": {
            "type": "object",
            "required": [
                "base",
                "images",
                "specs",
                "tagIds",
                "variants"
            ],
            "properties": {
                "base": {
                    "description": "Base product information (required)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.CreateProductBasePayload"
                        }
                    ]
                },
                "images": {
                    "description": "List of product images (required)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.CreateProductImagePayload"
                    }
                },
                "specs": {
                    "description": "List of product specifications (required)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.CreateProductSpecPayload"
                    }
                },
                "tagIds": {
                    "description": "List of tag IDs to assign (required)",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "variants": {
                    "description": "List of product variants (required)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.CreateProductVariantPayload"
                    }
                }
            }
        },
        "types.CreateProductSpecPayload": {
            "type": "object",
            "required": [
                "label",
                "value"
            ],
            "properties": {
                "label": {
                    "description": "Specification label (required)",
                    "type": "string"
                },
                "value": {
                    "description": "Specification value (required)",
                    "type": "string"
                }
            }
        },
        "types.CreateProductTagPayload": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "description": "Name of the tag (required)",
                    "type": "string"
                }
            }
        },
        "types.CreateProductVariantPayload": {
            "type": "object",
            "required": [
                "attributeSets",
                "quantity"
            ],
            "properties": {
                "attributeSets": {
                    "description": "Set of attributes defining this variant (required)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ProductVariantAttributeSetPayload"
                    }
                },
                "quantity": {
                    "description": "Initial stock quantity (required)",
                    "type": "integer"
                }
            }
        },
        "types.CreateRolePayload": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "description": "Description of the role",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the role (required, 1+ characters)",
                    "type": "string"
                }
            }
        },
        "types.CreateStoreAddressPayload": {
            "type": "object",
            "required": [
                "city",
                "state",
                "street",
                "zipcode"
            ],
            "properties": {
                "city": {
                    "description": "City (required)",
                    "type": "string"
                },
                "details": {
                    "description": "Additional address details",
                    "type": "string"
                },
                "state": {
                    "description": "State/Province (required)",
                    "type": "string"
                },
                "storeId": {
                    "description": "ID of the store this address belongs to",
                    "type": "integer"
                },
                "street": {
                    "description": "Street address (required)",
                    "type": "string"
                },
                "zipcode": {
                    "description": "Zip/Postal code (required)",
                    "type": "string"
                }
            }
        },
        "types.CreateStorePayload": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "description": "Store description",
                    "type": "string"
                },
                "name": {
                    "description": "Store name (required)",
                    "type": "string"
                },
                "ownerId": {
                    "description": "ID of the store owner",
                    "type": "integer"
                }
            }
        },
        "types.CreateStorePhoneNumberPayload": {
            "type": "object",
            "required": [
                "countryCode",
                "number"
            ],
            "properties": {
                "countryCode": {
                    "description": "Country code (1-4 characters, required)",
                    "type": "string",
                    "maxLength": 4,
                    "minLength": 1
                },
                "number": {
                    "description": "Phone number (5-20 characters, required)",
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 5
                },
                "storeId": {
                    "description": "ID of the store this number belongs to",
                    "type": "integer"
                }
            }
        },
        "types.CreateUserAddressPayload": {
            "type": "object",
            "required": [
                "city",
                "state",
                "street",
                "zipcode"
            ],
            "properties": {
                "city": {
                    "description": "City",
                    "type": "string"
                },
                "details": {
                    "description": "Additional address details",
                    "type": "string"
                },
                "state": {
                    "description": "State/Province",
                    "type": "string"
                },
                "street": {
                    "description": "Street address",
                    "type": "string"
                },
                "userId": {
                    "description": "User ID this address belongs to",
                    "type": "integer"
                },
                "zipcode": {
                    "description": "Zip/Postal code",
                    "type": "string"
                }
            }
        },
        "types.CreateUserPayload": {
            "type": "object",
            "required": [
                "birthDate",
                "email",
                "password",
                "username"
            ],
            "properties": {
                "birthDate": {
                    "description": "Birth date",
                    "type": "string"
                },
                "email": {
                    "description": "Email address",
                    "type": "string"
                },
                "fullName": {
                    "description": "Full name",
                    "type": "string"
                },
                "password": {
                    "description": "Password (6-130 characters)",
                    "type": "string",
                    "maxLength": 130,
                    "minLength": 6
                },
                "roleId": {
                    "description": "Role ID",
                    "type": "integer"
                },
                "username": {
                    "description": "Username (5+ characters)",
                    "type": "string",
                    "minLength": 5
                }
            }
        },
        "types.CreateUserPhoneNumberPayload": {
            "type": "object",
            "required": [
                "countryCode",
                "number"
            ],
            "properties": {
                "countryCode": {
                    "description": "Country code (1-4 characters)",
                    "type": "string",
                    "maxLength": 4,
                    "minLength": 1
                },
                "number": {
                    "description": "Phone number (5-20 characters)",
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 5
                },
                "userId": {
                    "description": "User ID this phone number belongs to",
                    "type": "integer"
                }
            }
        },
        "types.CreateWalletTransactionPayload": {
            "type": "object",
            "required": [
                "amount"
            ],
            "properties": {
                "amount": {
                    "description": "Transaction amount (required)",
                    "type": "number"
                },
                "txType": {
                    "description": "Type of transaction",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.TransactionType"
                        }
                    ]
                },
                "walletId": {
                    "description": "ID of the wallet this transaction belongs to",
                    "type": "integer"
                }
            }
        },
        "types.FileUploadResponse": {
            "type": "object",
            "properties": {
                "fileName": {
                    "description": "Uploaded file name",
                    "type": "string"
                }
            }
        },
        "types.ForgotPasswordRequestPayload": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "description": "Email address to send reset instructions to (valid email, required)",
                    "type": "string"
                }
            }
        },
        "types.GroupActionPermissionAssignmentPayload": {
            "type": "object",
            "properties": {
                "actions": {
                    "description": "Names of actions to assign (at least one required)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupId": {
                    "description": "ID of the permission group (required)",
                    "type": "integer"
                }
            }
        },
        "types.GroupActionPermissionInfo": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "Action being permitted (needs permission)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.Action"
                        }
                    ]
                }
            }
        },
        "types.GroupResourcePermissionAssignmentPayload": {
            "type": "object",
            "properties": {
                "groupId": {
                    "description": "ID of the permission group (required)",
                    "type": "integer"
                },
                "resources": {
                    "description": "Names of resources to assign (at least one required)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "types.GroupResourcePermissionInfo": {
            "type": "object",
            "properties": {
                "resource": {
                    "description": "Resource being permitted (needs permission)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.Resource"
                        }
                    ]
                }
            }
        },
        "types.HTTPError": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Error message string",
                    "type": "string"
                }
            }
        },
        "types.LoginResponsePayload": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "description": "JWT access token for authenticated requests",
                    "type": "string"
                }
            }
        },
        "types.LoginUserPayload": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "description": "Password for login (6-130 characters, required)",
                    "type": "string",
                    "maxLength": 130,
                    "minLength": 6
                },
                "username": {
                    "description": "Username for login (5+ characters, required)",
                    "type": "string",
                    "minLength": 5
                }
            }
        },
        "types.LogoutResponsePayload": {
            "type": "object",
            "properties": {
                "success": {
                    "description": "Indicates whether the logout was successful",
                    "type": "boolean"
                }
            }
        },
        "types.NewAddressResponse": {
            "type": "object",
            "properties": {
                "addressId": {
                    "description": "New address id",
                    "type": "integer"
                }
            }
        },
        "types.NewOrderResponse": {
            "type": "object",
            "properties": {
                "orderId": {
                    "description": "New order id",
                    "type": "integer"
                }
            }
        },
        "types.NewPermissionGroupResponse": {
            "type": "object",
            "properties": {
                "pgroupId": {
                    "description": "New permission group id",
                    "type": "integer"
                }
            }
        },
        "types.NewPhoneNumberResponse": {
            "type": "object",
            "properties": {
                "phoneNumberId": {
                    "description": "New phone number id",
                    "type": "integer"
                }
            }
        },
        "types.NewProductAttributeResponse": {
            "type": "object",
            "properties": {
                "attributeId": {
                    "description": "New product attribute id",
                    "type": "integer"
                }
            }
        },
        "types.NewProductCategoryResponse": {
            "type": "object",
            "properties": {
                "categoryId": {
                    "description": "New product category id",
                    "type": "integer"
                }
            }
        },
        "types.NewProductCommentResponse": {
            "type": "object",
            "properties": {
                "commentId": {
                    "description": "New product comment id",
                    "type": "integer"
                }
            }
        },
        "types.NewProductOfferResponse": {
            "type": "object",
            "properties": {
                "offerId": {
                    "description": "New product offer id",
                    "type": "integer"
                }
            }
        },
        "types.NewProductResponse": {
            "type": "object",
            "properties": {
                "productId": {
                    "description": "New product id",
                    "type": "integer"
                }
            }
        },
        "types.NewProductTagResponse": {
            "type": "object",
            "properties": {
                "tagId": {
                    "description": "New product tag id",
                    "type": "integer"
                }
            }
        },
        "types.NewRoleResponse": {
            "type": "object",
            "properties": {
                "roleId": {
                    "description": "New role id",
                    "type": "integer"
                }
            }
        },
        "types.NewStoreResponse": {
            "type": "object",
            "properties": {
                "storeId": {
                    "description": "New store id",
                    "type": "integer"
                }
            }
        },
        "types.NewUserResponse": {
            "type": "object",
            "properties": {
                "userId": {
                    "description": "New user id",
                    "type": "integer"
                }
            }
        },
        "types.NewWalletTransactionResponse": {
            "type": "object",
            "properties": {
                "txId": {
                    "description": "New transaction id",
                    "type": "integer"
                }
            }
        },
        "types.Order": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "When the order was created (private, needs permission)",
                    "type": "string"
                },
                "fee": {
                    "description": "Any additional fees (private, needs permission)",
                    "type": "number"
                },
                "id": {
                    "description": "Unique identifier for the order (private, needs permission)",
                    "type": "integer"
                },
                "paymentStatus": {
                    "description": "Current status of the payment (private, needs permission)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.OrderPaymentStatus"
                        }
                    ]
                },
                "shipmentStatus": {
                    "description": "Current status of the shipment (private, needs permission)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.OrderShipmentStatus"
                        }
                    ]
                },
                "totalProducts": {
                    "description": "Total number of products in the order (private, needs permission)",
                    "type": "integer"
                },
                "totalShipmentPrice": {
                    "description": "Total shipping cost (private, needs permission)",
                    "type": "number"
                },
                "totalVariantsPrice": {
                    "description": "Total price of all product variants (private, needs permission)",
                    "type": "number"
                },
                "updatedAt": {
                    "description": "When the order was last updated (private, needs permission)",
                    "type": "string"
                },
                "userId": {
                    "description": "ID of the user who placed the order (private, needs permission)",
                    "type": "integer"
                }
            }
        },
        "types.OrderPaymentStatus": {
            "type": "string",
            "enum": [
                "pending",
                "successful",
                "failed"
            ],
            "x-enum-varnames": [
                "OrderPaymentStatusPending",
                "OrderPaymentStatusSuccessful",
                "OrderPaymentStatusFailed"
            ]
        },
        "types.OrderProductVariantAssignmentPayload": {
            "type": "object",
            "required": [
                "quantity",
                "variantId"
            ],
            "properties": {
                "quantity": {
                    "description": "Number of units to order (required)",
                    "type": "integer"
                },
                "variantId": {
                    "description": "ID of the product variant to order (required)",
                    "type": "integer"
                }
            }
        },
        "types.OrderProductVariantInfo": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Unique identifier for the order variant (private, needs permission)",
                    "type": "integer"
                },
                "orderId": {
                    "description": "ID of the order this variant belongs to (private, needs permission)",
                    "type": "integer"
                },
                "product": {
                    "description": "Information about the base product (private, needs permission)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.Product"
                        }
                    ]
                },
                "quantity": {
                    "description": "Quantity ordered (private, needs permission)",
                    "type": "integer"
                },
                "selectedVariant": {
                    "description": "Complete information about the selected variant (private, needs permission)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.ProductVariantWithAttributeSet"
                        }
                    ]
                },
                "shippingPrice": {
                    "description": "Shipping cost for this variant (private, needs permission)",
                    "type": "number"
                },
                "variantId": {
                    "description": "ID of the product variant (private, needs permission)",
                    "type": "integer"
                },
                "variantPrice": {
                    "description": "Price per unit of the variant (private, needs permission)",
                    "type": "number"
                }
            }
        },
        "types.OrderShipmentStatus": {
            "type": "string",
            "enum": [
                "to_be_determined",
                "on_the_way",
                "delivered",
                "cancelled"
            ],
            "x-enum-varnames": [
                "OrderShipmentStatusToBeDetermined",
                "OrderShipmentStatusOnTheWay",
                "OrderShipmentStatusDelivered",
                "OrderShipmentStatusCancelled"
            ]
        },
        "types.PermissionGroup": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "When the permission group was created (needs permission)",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the permission group (needs permission)",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier for the permission group (needs permission)",
                    "type": "integer"
                },
                "name": {
                    "description": "Name of the permission group (needs permission)",
                    "type": "string"
                }
            }
        },
        "types.PermissionGroupWithPermissions": {
            "type": "object",
            "properties": {
                "actionPermissions": {
                    "description": "List of action permissions in this group (needs permission)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.GroupActionPermissionInfo"
                    }
                },
                "createdAt": {
                    "description": "When the permission group was created (needs permission)",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the permission group (needs permission)",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier for the permission group (needs permission)",
                    "type": "integer"
                },
                "name": {
                    "description": "Name of the permission group (needs permission)",
                    "type": "string"
                },
                "resourcePermissions": {
                    "description": "List of resource permissions in this group (needs permission)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.GroupResourcePermissionInfo"
                    }
                }
            }
        },
        "types.Product": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "When the product was created (public)",
                    "type": "string"
                },
                "description": {
                    "description": "Detailed product description (public)",
                    "type": "string"
                },
                "id": {
                    "description": "Unique product identifier (public)",
                    "type": "integer"
                },
                "isActive": {
                    "description": "Whether the product is active/available (public)",
                    "type": "boolean"
                },
                "mainImage": {
                    "description": "Main product image (public, optional)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.ProductImage"
                        }
                    ]
                },
                "name": {
                    "description": "Name of the product (public)",
                    "type": "string"
                },
                "offer": {
                    "description": "Current offer/discount, if any (public, optional)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.ProductOffer"
                        }
                    ]
                },
                "price": {
                    "description": "Current price of the product (public)",
                    "type": "number"
                },
                "shipmentFactor": {
                    "description": "Factor used to calculate shipping costs (public)",
                    "type": "number"
                },
                "slug": {
                    "description": "URL-friendly product identifier (public)",
                    "type": "string"
                },
                "store": {
                    "description": "Store information (public)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.StoreInfo"
                        }
                    ]
                },
                "subcategoryId": {
                    "description": "ID of the subcategory this product belongs to (public)",
                    "type": "integer"
                },
                "totalQuantity": {
                    "description": "Total available quantity across all variants (public)",
                    "type": "integer"
                },
                "updatedAt": {
                    "description": "When the product was last updated (public)",
                    "type": "string"
                }
            }
        },
        "types.ProductAttributeOption": {
            "type": "object",
            "properties": {
                "attributeId": {
                    "description": "ID of the attribute this option belongs to (public)",
                    "type": "integer"
                },
                "id": {
                    "description": "Unique option identifier (public)",
                    "type": "integer"
                },
                "value": {
                    "description": "Value of the option (public)",
                    "type": "string"
                }
            }
        },
        "types.ProductAttributeWithOptions": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Unique attribute identifier (public)",
                    "type": "integer"
                },
                "label": {
                    "description": "Name/label of the attribute (public)",
                    "type": "string"
                },
                "options": {
                    "description": "List of available options for this attribute (public)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ProductAttributeOption"
                    }
                }
            }
        },
        "types.ProductCategory": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "When the category was created (public)",
                    "type": "string"
                },
                "id": {
                    "description": "Unique category identifier (public)",
                    "type": "integer"
                },
                "imageName": {
                    "description": "Filename of the category image (public)",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the category (public)",
                    "type": "string"
                },
                "parentCategoryId": {
                    "description": "ID of the parent category, if any (public)",
                    "type": "number"
                },
                "updatedAt": {
                    "description": "When the category was last updated (public)",
                    "type": "string"
                }
            }
        },
        "types.ProductCategoryWithParents": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "When the category was created (public)",
                    "type": "string"
                },
                "id": {
                    "description": "Unique category identifier (public)",
                    "type": "integer"
                },
                "imageName": {
                    "description": "Filename of the category image (public)",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the category (public)",
                    "type": "string"
                },
                "parentCategory": {
                    "description": "Parent category information (public, optional)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.ProductCategoryWithParents"
                        }
                    ]
                },
                "parentCategoryId": {
                    "description": "ID of the parent category, if any (public)",
                    "type": "number"
                },
                "updatedAt": {
                    "description": "When the category was last updated (public)",
                    "type": "string"
                }
            }
        },
        "types.ProductComment": {
            "type": "object",
            "properties": {
                "comment": {
                    "description": "Text of the comment (public)",
                    "type": "string"
                },
                "createdAt": {
                    "description": "When the comment was created (public)",
                    "type": "string"
                },
                "id": {
                    "description": "Unique comment identifier (public)",
                    "type": "integer"
                },
                "productId": {
                    "description": "ID of the product being commented on (public)",
                    "type": "integer"
                },
                "scoring": {
                    "description": "Rating score (1-5) (public)",
                    "type": "integer"
                },
                "updatedAt": {
                    "description": "When the comment was last updated (public)",
                    "type": "string"
                },
                "userId": {
                    "description": "ID of the user who made the comment (public)",
                    "type": "integer"
                }
            }
        },
        "types.ProductExtended": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "When the product was created (public)",
                    "type": "string"
                },
                "description": {
                    "description": "Detailed product description (public)",
                    "type": "string"
                },
                "id": {
                    "description": "Unique product identifier (public)",
                    "type": "integer"
                },
                "images": {
                    "description": "List of product images (public)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ProductImage"
                    }
                },
                "isActive": {
                    "description": "Whether the product is active/available (public)",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name of the product (public)",
                    "type": "string"
                },
                "offer": {
                    "description": "Current offer/discount, if any (public, optional)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.ProductOffer"
                        }
                    ]
                },
                "price": {
                    "description": "Current price of the product (public)",
                    "type": "number"
                },
                "shipmentFactor": {
                    "description": "Factor used to calculate shipping costs (public)",
                    "type": "number"
                },
                "slug": {
                    "description": "URL-friendly product identifier (public)",
                    "type": "string"
                },
                "specs": {
                    "description": "List of product specifications (public)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ProductSpec"
                    }
                },
                "store": {
                    "description": "Store information (public)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.StoreInfo"
                        }
                    ]
                },
                "subcategory": {
                    "description": "Subcategory information with parent hierarchy (public)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.ProductCategoryWithParents"
                        }
                    ]
                },
                "subcategoryId": {
                    "description": "ID of the subcategory this product belongs to (public)",
                    "type": "integer"
                },
                "tags": {
                    "description": "List of tags assigned to the product (public)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ProductTag"
                    }
                },
                "updatedAt": {
                    "description": "When the product was last updated (public)",
                    "type": "string"
                },
                "variants": {
                    "description": "List of available variants with attributes (public)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ProductVariantWithAttributeSet"
                    }
                }
            }
        },
        "types.ProductImage": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Unique image identifier (public)",
                    "type": "integer"
                },
                "imageName": {
                    "description": "Filename of the image (public)",
                    "type": "string"
                },
                "isMain": {
                    "description": "Whether this is the main product image (public)",
                    "type": "boolean"
                },
                "productId": {
                    "description": "ID of the product this image belongs to (public)",
                    "type": "integer"
                }
            }
        },
        "types.ProductInventoryResponse": {
            "type": "object",
            "properties": {
                "inStock": {
                    "description": "If the quantity is greater than 0",
                    "type": "boolean"
                },
                "total": {
                    "description": "Total quantity of the product",
                    "type": "integer"
                }
            }
        },
        "types.ProductOffer": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "When the offer was created (public)",
                    "type": "string"
                },
                "discount": {
                    "description": "Discount percentage (public)",
                    "type": "number"
                },
                "expireAt": {
                    "description": "When the offer expires (public)",
                    "type": "string"
                },
                "id": {
                    "description": "Unique offer identifier (public)",
                    "type": "integer"
                },
                "productId": {
                    "description": "ID of the product this offer applies to (public)",
                    "type": "integer"
                },
                "updatedAt": {
                    "description": "When the offer was last updated (public)",
                    "type": "string"
                }
            }
        },
        "types.ProductSpec": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Unique specification identifier (public)",
                    "type": "integer"
                },
                "label": {
                    "description": "Label/name of the specification (public)",
                    "type": "string"
                },
                "productId": {
                    "description": "ID of the product this spec belongs to (public)",
                    "type": "integer"
                },
                "value": {
                    "description": "Value of the specification (public)",
                    "type": "string"
                }
            }
        },
        "types.ProductTag": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "When the tag was created (public)",
                    "type": "string"
                },
                "id": {
                    "description": "Unique tag identifier (public)",
                    "type": "integer"
                },
                "name": {
                    "description": "Name of the tag (public)",
                    "type": "string"
                },
                "updatedAt": {
                    "description": "When the tag was last updated (public)",
                    "type": "string"
                }
            }
        },
        "types.ProductVariantAttributeSetPayload": {
            "type": "object",
            "required": [
                "attributeId",
                "optionId"
            ],
            "properties": {
                "attributeId": {
                    "description": "Attribute ID (required)",
                    "type": "integer"
                },
                "optionId": {
                    "description": "Selected option ID (required)",
                    "type": "integer"
                }
            }
        },
        "types.ProductVariantSelectedAttributeOption": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Unique attribute identifier (public)",
                    "type": "integer"
                },
                "label": {
                    "description": "Name/label of the attribute (public)",
                    "type": "string"
                },
                "selectedOption": {
                    "description": "The selected option for this attribute (public)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.ProductAttributeOption"
                        }
                    ]
                }
            }
        },
        "types.ProductVariantWithAttributeSet": {
            "type": "object",
            "properties": {
                "attributeSet": {
                    "description": "Complete set of attributes defining this variant (public)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ProductVariantSelectedAttributeOption"
                    }
                },
                "id": {
                    "description": "Unique variant identifier (public)",
                    "type": "integer"
                },
                "productId": {
                    "description": "ID of the product this variant belongs to (public)",
                    "type": "integer"
                },
                "quantity": {
                    "description": "Current stock quantity (public)",
                    "type": "integer"
                }
            }
        },
        "types.ResetPasswordPayload": {
            "type": "object",
            "required": [
                "newPassword"
            ],
            "properties": {
                "newPassword": {
                    "description": "New password to set (6-130 characters, required)",
                    "type": "string",
                    "maxLength": 130,
                    "minLength": 6
                }
            }
        },
        "types.Resource": {
            "type": "string",
            "enum": [
                "full_access",
                "roles_and_permissions",
                "users_full_access",
                "wallet_transactions_full_access",
                "stores_full_access",
                "orders_full_access"
            ],
            "x-enum-varnames": [
                "ResourceFullAccess",
                "ResourceRolesAndPermissions",
                "ResourceUsersFullAccess",
                "ResourceWalletTransactionsFullAccess",
                "ResourceStoresFullAccess",
                "ResourceOrdersFullAccess"
            ]
        },
        "types.Role": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "When the role was created (needs permission)",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the role (needs permission)",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier for the role (needs permission)",
                    "type": "integer"
                },
                "name": {
                    "description": "Name of the role (needs permission)",
                    "type": "string"
                },
                "updatedAt": {
                    "description": "When the role was last updated (needs permission)",
                    "type": "string"
                }
            }
        },
        "types.RoleGroupAssignmentPayload": {
            "type": "object",
            "properties": {
                "groupIds": {
                    "description": "IDs of permission groups to assign (at least one required)",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "roleId": {
                    "description": "ID of the role to assign groups to (required)",
                    "type": "integer"
                }
            }
        },
        "types.RoleWithPermissionGroups": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "When the role was created (needs permission)",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the role (needs permission)",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier for the role (needs permission)",
                    "type": "integer"
                },
                "name": {
                    "description": "Name of the role (needs permission)",
                    "type": "string"
                },
                "permissionGroups": {
                    "description": "List of permission groups assigned to this role (needs permission)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.PermissionGroup"
                    }
                },
                "updatedAt": {
                    "description": "When the role was last updated (needs permission)",
                    "type": "string"
                }
            }
        },
        "types.Store": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "When the store was created",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the store",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier for the store",
                    "type": "integer"
                },
                "name": {
                    "description": "Name of the store",
                    "type": "string"
                },
                "ownerId": {
                    "description": "ID of the store owner (visibility depends on settings, needs permission)",
                    "type": "integer"
                },
                "updatedAt": {
                    "description": "When the store was last updated",
                    "type": "string"
                },
                "verified": {
                    "description": "Whether the store is verified (private, needs permission)",
                    "type": "boolean"
                }
            }
        },
        "types.StoreAddress": {
            "type": "object",
            "properties": {
                "city": {
                    "description": "City (visibility depends on isPublic, needs permission)",
                    "type": "string"
                },
                "createdAt": {
                    "description": "When the address was added",
                    "type": "string"
                },
                "details": {
                    "description": "Additional details (visibility depends on isPublic, needs permission)",
                    "type": "string"
                },
                "id": {
                    "description": "Address ID",
                    "type": "integer"
                },
                "isPublic": {
                    "description": "Whether the address is publicly visible",
                    "type": "boolean"
                },
                "state": {
                    "description": "State/Province (visibility depends on isPublic, needs permission)",
                    "type": "string"
                },
                "storeId": {
                    "description": "ID of the store this address belongs to",
                    "type": "integer"
                },
                "street": {
                    "description": "Street address (visibility depends on isPublic, needs permission)",
                    "type": "string"
                },
                "updatedAt": {
                    "description": "When the address was last updated",
                    "type": "string"
                },
                "zipcode": {
                    "description": "Zip/Postal code (visibility depends on isPublic, needs permission)",
                    "type": "string"
                }
            }
        },
        "types.StoreInfo": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Store ID",
                    "type": "integer"
                },
                "name": {
                    "description": "Store name",
                    "type": "string"
                }
            }
        },
        "types.StorePhoneNumber": {
            "type": "object",
            "properties": {
                "countryCode": {
                    "description": "Country code (visibility depends on isPublic, needs permission)",
                    "type": "string"
                },
                "createdAt": {
                    "description": "When the number was added",
                    "type": "string"
                },
                "id": {
                    "description": "Phone number ID",
                    "type": "integer"
                },
                "isPublic": {
                    "description": "Whether the number is publicly visible",
                    "type": "boolean"
                },
                "number": {
                    "description": "Phone number (visibility depends on isPublic, needs permission)",
                    "type": "string"
                },
                "storeId": {
                    "description": "ID of the store this number belongs to",
                    "type": "integer"
                },
                "updatedAt": {
                    "description": "When the number was last updated",
                    "type": "string"
                },
                "verified": {
                    "description": "Whether the number is verified (visibility depends on isPublic, needs permission)",
                    "type": "boolean"
                }
            }
        },
        "types.StoreSettings": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Settings ID",
                    "type": "integer"
                },
                "publicOwner": {
                    "description": "Whether owner information is public",
                    "type": "boolean"
                },
                "storeId": {
                    "description": "ID of the store these settings belong to",
                    "type": "integer"
                },
                "updatedAt": {
                    "description": "When settings were last updated",
                    "type": "string"
                }
            }
        },
        "types.TotalPageCountResponse": {
            "type": "object",
            "properties": {
                "pages": {
                    "description": "Total pages count",
                    "type": "integer"
                }
            }
        },
        "types.TransactionStatus": {
            "type": "string",
            "enum": [
                "pending",
                "successful",
                "failed"
            ],
            "x-enum-varnames": [
                "TransactionStatusPending",
                "TransactionStatusSuccessful",
                "TransactionStatusFailed"
            ]
        },
        "types.TransactionType": {
            "type": "string",
            "enum": [
                "deposit",
                "withdraw"
            ],
            "x-enum-varnames": [
                "TransactionTypeDeposit",
                "TransactionTypeWithdraw"
            ]
        },
        "types.UpdateOrderShipmentPayload": {
            "type": "object",
            "properties": {
                "arrivalDate": {
                    "description": "Updated estimated arrival date",
                    "type": "string"
                },
                "status": {
                    "description": "New status for the shipment",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.OrderShipmentStatus"
                        }
                    ]
                }
            }
        },
        "types.UpdatePermissionGroupPayload": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "New description for the permission group",
                    "type": "string"
                },
                "name": {
                    "description": "New name for the permission group (1+ characters if provided)",
                    "type": "string"
                }
            }
        },
        "types.UpdateProductAttributePayload": {
            "type": "object",
            "properties": {
                "delOptionIds": {
                    "description": "Option IDs to remove",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "label": {
                    "description": "New attribute label",
                    "type": "string"
                },
                "newOptions": {
                    "description": "New options to add",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updatedOptions": {
                    "description": "Existing options to update",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.UpdatedProductAttributeOptionPayload"
                    }
                }
            }
        },
        "types.UpdateProductBasePayload": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "New product description",
                    "type": "string"
                },
                "isActive": {
                    "description": "New active status",
                    "type": "boolean"
                },
                "name": {
                    "description": "New product name",
                    "type": "string"
                },
                "price": {
                    "description": "New product price",
                    "type": "number"
                },
                "shipmentFactor": {
                    "description": "New shipping cost factor",
                    "type": "number"
                },
                "slug": {
                    "description": "New URL-friendly slug",
                    "type": "string"
                },
                "subcategoryId": {
                    "description": "New subcategory ID",
                    "type": "integer"
                }
            }
        },
        "types.UpdateProductCategoryPayload": {
            "type": "object",
            "properties": {
                "imageName": {
                    "description": "New image filename",
                    "type": "string"
                },
                "name": {
                    "description": "New name for the category",
                    "type": "string"
                }
            }
        },
        "types.UpdateProductCommentPayload": {
            "type": "object",
            "properties": {
                "comment": {
                    "description": "Updated comment text",
                    "type": "string"
                },
                "scoring": {
                    "description": "New rating score",
                    "type": "integer"
                }
            }
        },
        "types.UpdateProductOfferPayload": {
            "type": "object",
            "properties": {
                "discount": {
                    "description": "New discount percentage",
                    "type": "number"
                },
                "expireAt": {
                    "description": "New expiration date",
                    "type": "string"
                }
            }
        },
        "types.UpdateProductPayload": {
            "type": "object",
            "properties": {
                "base": {
                    "description": "Base product updates",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.UpdateProductBasePayload"
                        }
                    ]
                },
                "delImageIds": {
                    "description": "Image IDs to remove",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "delSpecIds": {
                    "description": "Spec IDs to remove",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "delTagIds": {
                    "description": "Tag IDs to remove",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "delVariantIds": {
                    "description": "Variant IDs to remove",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "newImages": {
                    "description": "New images to add",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.CreateProductImagePayload"
                    }
                },
                "newMainImage": {
                    "description": "ID of the new main image",
                    "type": "integer"
                },
                "newSpecs": {
                    "description": "New specs to add",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.CreateProductSpecPayload"
                    }
                },
                "newTagIds": {
                    "description": "New tag IDs to add",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "newVariants": {
                    "description": "New variants to add",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.CreateProductVariantPayload"
                    }
                },
                "updatedSpecs": {
                    "description": "Existing specs to update",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.UpdatedProductSpecPayload"
                    }
                },
                "updatedVariants": {
                    "description": "Existing variants to update",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.UpdatedProductVariantPayload"
                    }
                }
            }
        },
        "types.UpdateProductTagPayload": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "New name for the tag",
                    "type": "string"
                }
            }
        },
        "types.UpdateRolePayload": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "New description for the role",
                    "type": "string"
                },
                "name": {
                    "description": "New name for the role (1+ characters if provided)",
                    "type": "string"
                }
            }
        },
        "types.UpdateStoreAddressPayload": {
            "type": "object",
            "properties": {
                "city": {
                    "description": "New city",
                    "type": "string"
                },
                "details": {
                    "description": "New additional details",
                    "type": "string"
                },
                "isPublic": {
                    "description": "New visibility status",
                    "type": "boolean"
                },
                "state": {
                    "description": "New state/province",
                    "type": "string"
                },
                "street": {
                    "description": "New street address",
                    "type": "string"
                },
                "zipcode": {
                    "description": "New zip/postal code",
                    "type": "string"
                }
            }
        },
        "types.UpdateStorePayload": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "New store description",
                    "type": "string"
                },
                "name": {
                    "description": "New store name",
                    "type": "string"
                },
                "verified": {
                    "description": "New verification status",
                    "type": "boolean"
                }
            }
        },
        "types.UpdateStorePhoneNumberPayload": {
            "type": "object",
            "properties": {
                "countryCode": {
                    "description": "New country code (1-4 characters)",
                    "type": "string",
                    "maxLength": 4,
                    "minLength": 1
                },
                "isPublic": {
                    "description": "New visibility status",
                    "type": "boolean"
                },
                "number": {
                    "description": "New phone number (5-20 characters)",
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 5
                },
                "verified": {
                    "description": "New verification status",
                    "type": "boolean"
                }
            }
        },
        "types.UpdateStoreSettingsPayload": {
            "type": "object",
            "properties": {
                "publicOwner": {
                    "description": "New owner visibility setting",
                    "type": "boolean"
                }
            }
        },
        "types.UpdateUserAddressPayload": {
            "type": "object",
            "properties": {
                "city": {
                    "description": "New city",
                    "type": "string"
                },
                "details": {
                    "description": "New additional details",
                    "type": "string"
                },
                "isPublic": {
                    "description": "Whether the address should be public",
                    "type": "boolean"
                },
                "state": {
                    "description": "New state/province",
                    "type": "string"
                },
                "street": {
                    "description": "New street address",
                    "type": "string"
                },
                "zipcode": {
                    "description": "New zip/postal code",
                    "type": "string"
                }
            }
        },
        "types.UpdateUserPasswordPayload": {
            "type": "object",
            "properties": {
                "currentPassword": {
                    "description": "Current password (6-130 characters)",
                    "type": "string",
                    "maxLength": 130,
                    "minLength": 6
                },
                "newPassword": {
                    "description": "New password (6-130 characters)",
                    "type": "string",
                    "maxLength": 130,
                    "minLength": 6
                }
            }
        },
        "types.UpdateUserPayload": {
            "type": "object",
            "properties": {
                "birthDate": {
                    "description": "New birth date",
                    "type": "string"
                },
                "email": {
                    "description": "New email address",
                    "type": "string"
                },
                "emailVerified": {
                    "description": "Email verification status",
                    "type": "boolean"
                },
                "fullName": {
                    "description": "New full name",
                    "type": "string"
                },
                "isBanned": {
                    "description": "Ban status",
                    "type": "boolean"
                },
                "password": {
                    "description": "New password (6-130 characters)",
                    "type": "string",
                    "maxLength": 130,
                    "minLength": 6
                },
                "username": {
                    "description": "New username (5+ characters)",
                    "type": "string",
                    "minLength": 5
                }
            }
        },
        "types.UpdateUserPhoneNumberPayload": {
            "type": "object",
            "properties": {
                "countryCode": {
                    "description": "New country code (1-4 characters)",
                    "type": "string",
                    "maxLength": 4,
                    "minLength": 1
                },
                "isPublic": {
                    "description": "Whether the number should be public",
                    "type": "boolean"
                },
                "number": {
                    "description": "New phone number (5-20 characters)",
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 5
                },
                "verified": {
                    "description": "Verification status",
                    "type": "boolean"
                }
            }
        },
        "types.UpdateUserSettingsPayload": {
            "type": "object",
            "properties": {
                "isUsingDarkTheme": {
                    "description": "Whether to use dark theme",
                    "type": "boolean"
                },
                "language": {
                    "description": "Preferred language",
                    "type": "string"
                },
                "publicBirthDate": {
                    "description": "Whether birth date should be public",
                    "type": "boolean"
                },
                "publicEmail": {
                    "description": "Whether email should be public",
                    "type": "boolean"
                }
            }
        },
        "types.UpdatedProductAttributeOptionPayload": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "ID of the option to update",
                    "type": "integer"
                },
                "value": {
                    "description": "New option value",
                    "type": "string"
                }
            }
        },
        "types.UpdatedProductSpecPayload": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "ID of the spec to update",
                    "type": "integer"
                },
                "label": {
                    "description": "New specification label",
                    "type": "string"
                },
                "value": {
                    "description": "New specification value",
                    "type": "string"
                }
            }
        },
        "types.UpdatedProductVariantPayload": {
            "type": "object",
            "properties": {
                "delAttributeIds": {
                    "description": "Attribute IDs to remove",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "id": {
                    "description": "ID of the variant to update",
                    "type": "integer"
                },
                "newAttributeSets": {
                    "description": "New attribute sets to add",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ProductVariantAttributeSetPayload"
                    }
                },
                "quantity": {
                    "description": "New stock quantity",
                    "type": "integer"
                }
            }
        },
        "types.User": {
            "type": "object",
            "properties": {
                "birthDate": {
                    "description": "Birth date of the user (visibility depends on settings, needs permission)",
                    "type": "string",
                    "format": "date-time"
                },
                "createdAt": {
                    "description": "When the user was created",
                    "type": "string"
                },
                "email": {
                    "description": "Email address of the user (visibility depends on settings, needs permission)",
                    "type": "string"
                },
                "emailVerified": {
                    "description": "Indicates if email is verified (visibility depends on settings, needs permission)",
                    "type": "boolean"
                },
                "fullName": {
                    "description": "Full name of the user",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "isBanned": {
                    "description": "Indicates if user is banned",
                    "type": "boolean"
                },
                "roleId": {
                    "description": "Role ID of the user (private, needs permission)",
                    "type": "integer"
                },
                "updatedAt": {
                    "description": "When the user was last updated",
                    "type": "string"
                },
                "username": {
                    "description": "Username of the user (private, needs permission)",
                    "type": "string"
                }
            }
        },
        "types.UserAddress": {
            "type": "object",
            "properties": {
                "city": {
                    "description": "City (visibility depends on isPublic, needs permission)",
                    "type": "string"
                },
                "createdAt": {
                    "description": "When the address was added",
                    "type": "string"
                },
                "details": {
                    "description": "Additional address details (visibility depends on isPublic, needs permission)",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "isPublic": {
                    "description": "Whether the address is public",
                    "type": "boolean"
                },
                "state": {
                    "description": "State/Province (visibility depends on isPublic, needs permission)",
                    "type": "string"
                },
                "street": {
                    "description": "Street address (visibility depends on isPublic, needs permission)",
                    "type": "string"
                },
                "updatedAt": {
                    "description": "When the address was last updated",
                    "type": "string"
                },
                "userId": {
                    "description": "ID of the user this address belongs to",
                    "type": "integer"
                },
                "zipcode": {
                    "description": "Zip/Postal code (visibility depends on isPublic, needs permission)",
                    "type": "string"
                }
            }
        },
        "types.UserPhoneNumber": {
            "type": "object",
            "properties": {
                "countryCode": {
                    "description": "Country code (visibility depends on isPublic, needs permission)",
                    "type": "string"
                },
                "createdAt": {
                    "description": "When the phone number was added",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "isPublic": {
                    "description": "Whether the phone number is public",
                    "type": "boolean"
                },
                "number": {
                    "description": "Phone number (visibility depends on isPublic, needs permission)",
                    "type": "string"
                },
                "updatedAt": {
                    "description": "When the phone number was last updated",
                    "type": "string"
                },
                "userId": {
                    "description": "ID of the user this phone number belongs to",
                    "type": "integer"
                },
                "verified": {
                    "description": "Whether the phone number is verified (visibility depends on isPublic, needs permission)",
                    "type": "boolean"
                }
            }
        },
        "types.UserSettings": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "isUsingDarkTheme": {
                    "description": "Whether dark theme is enabled",
                    "type": "boolean"
                },
                "language": {
                    "description": "User's preferred language",
                    "type": "string"
                },
                "publicBirthDate": {
                    "description": "Whether birth date is public",
                    "type": "boolean"
                },
                "publicEmail": {
                    "description": "Whether email is public",
                    "type": "boolean"
                },
                "updatedAt": {
                    "description": "When settings were last updated",
                    "type": "string"
                },
                "userId": {
                    "description": "ID of the user these settings belong to",
                    "type": "integer"
                }
            }
        },
        "types.Wallet": {
            "type": "object",
            "properties": {
                "balance": {
                    "description": "Current balance in the wallet (private, needs permission)",
                    "type": "number"
                },
                "createdAt": {
                    "description": "When the wallet was created (private, needs permission)",
                    "type": "string"
                },
                "id": {
                    "description": "Wallet ID (private, needs permission)",
                    "type": "integer"
                },
                "updatedAt": {
                    "description": "When the wallet was last updated (private, needs permission)",
                    "type": "string"
                },
                "userId": {
                    "description": "ID of the user who owns this wallet (private, needs permission)",
                    "type": "integer"
                }
            }
        },
        "types.WalletTransaction": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Transaction amount (private, needs permission)",
                    "type": "number"
                },
                "createdAt": {
                    "description": "When the transaction was created (private, needs permission)",
                    "type": "string"
                },
                "id": {
                    "description": "Transaction ID (private, needs permission)",
                    "type": "integer"
                },
                "status": {
                    "description": "Current status of the transaction (private, needs permission)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.TransactionStatus"
                        }
                    ]
                },
                "txType": {
                    "description": "Type of transaction (credit/debit/etc) (private, needs permission)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.TransactionType"
                        }
                    ]
                },
                "updatedAt": {
                    "description": "When the transaction was last updated (private, needs permission)",
                    "type": "string"
                },
                "walletId": {
                    "description": "ID of the wallet this transaction belongs to (private, needs permission)",
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1.0 (BETA)",
	Host:             "localhost:5000",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "EcoNest API",
	Description:      "This is the backend API for EcoNest, an e-commerce platform.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
